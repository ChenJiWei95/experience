目录：
	》简介
	》三大核心
	》spring IoC和DI （DI注入的二种方式）
	》spring IOC和DI 注解操作 
	》bean的三种实例化方式
	》bean的作用域
	》spring AOP
	》spring的优势
	》spring能做什么
	》spring框架（模块）结构
	》事务
	》IoC 如何实现
	》面试题
	》所运用到的一些设计模式
	》与EJB的区别
	》EJB的基础RMI
	
简介：
	》Spring是负责协调，实现业务对象管理 即：负责不同层面的衔接
	》两大核心：IOC/DI（控制反转/依赖注入），AOP

三大核心：
	》AOP、DI、IOC
	
spring IoC和DI
	IOC
	》Inverse of Control（控制反转）：这是一种设计思想，将原本程序中手动创建对象的控制权，交由spring框架来管理。
	DI
	》Dependency Injection（依赖注入）：将对象依赖属性通过配置设值给该对象；容器将自动的注入所依赖的对象
	》DI注入的两种方式：
	》》setter注入
	》》构造方法注入
	
bean的三种实例化方式：
	》构造器实例化
	<bean id="bean1" class="" ></bean>
	》静态工厂实例化
	编写一个静态工厂类
	<bean id="bean1" class="" factory-method="createBean"></bean>
	》实例工厂方式实例化
	编写一个工厂类
	<bean id="factoryBean" class=""/>
	<bean id="bean1" factory-bean="factoryBean" factory-method="createBean"/>
	
bean的作用域：scope=""
	》singleton：默认是单例模式。只有一个实例，对bean的引用始终将指向同一个对象。
	》prototype：容器将创建一个新的bean实例
	》request：对于同一次HTTP请求中，容器将返回同一个bean实例，反之。
	》session：
	》global Session： 

spring IOC和DI 注解操作
	引用：https://blog.csdn.net/weixin_42166907/article/details/82919717
	注册：
	》@Controller 控制层
	》@Service 业务层
	》@Component 通用，不提倡使用
	》@Repository 持久层
	注入:
	》@Autowired 自动按照类型注入，使用注解注入时set方法可省略，使用注入对象的名称查找，找不到会报错
	》@Qualifier 按照类型注入的基础之上，在按照Bean的id注入。给字段注入时不能独立使用。value：指定bean的id
	》@Resource 直接按照bean的id注入。如果没有指定名称或找不到 则按照类型查找对象
	》@Value  注入基本数据类型和String类型数据的，可以使用el表达式读取properties文件中的属性
	通过注解完全遗弃配置文件 （aop怎么解决）  
	》@Configuration 指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。
	》》获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。
	》@ComponentScan 指定spring在初始化容器时要扫描的包。
	》》属性： basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。
	》@PropertySource 用于加载.properties文件中的配置。此注解指定properties配置文件的位置。
	》》属性： value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:
	》@Import 用于导入其他配置类，在引入其他配置类时
	》》属性： value[]：用于指定其他配置类的字节码。
	》@Bean 只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。
	》》name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。
	
spring AOP: 
	摘抄定义： https://blog.csdn.net/wuruijiang/article/details/78970720
	》AOP面向切面编程，可以说是OOP（Object Oriented Programming）面向对象编程的补充和完善。OOP引入封装、
	》》继承和多态等概念来建立一种对象层次结构，
	》》用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，
	》》OOP允许你定义从上到下的关系，但并不适合从定义从左到右的关系。例如日志功能，
	》》日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系，对于其他代码，如安全性、
	》》异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切代码，在OOP设计中，它导致了大量代码的重复，
	》》而不利于各个模块的重用
	》应用：权限认证、日志、事务处理
	》总结：面向切面编程，是OOP的一种补充与完善，OOP所具备的是一种上的下的层次关系，而一些周边的功能代码如日志啊，
	》》这是散列在各个层次的所有对象之中。这是一种左到右的水平关系，而OOP不具备，当然也可编写进OOP各个层次当中，
	》》这样的代码不具备重用性的。而AOP我认为这也是解决这一问题的最佳解决方案，
	》》将核心业务中公共行为即周边的功能代码封装到一个可重用的模块当中
	》》达到了减少重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。
	实现：
	动态代理技术：  （代理的类需要实现一个或多个接口）
	》利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；
	静态织入：
	》引入特定的语法创建“切面”，从而使得编译器可以在编译期间织入有关的“切面”代码。
	定义：
	》Aspect Oriented Program（面向切面编程） 
	》在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。
	》》所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务
	》》所谓的周边功能，比如性能统计，日志，事务管理等等
	》最后效果是：核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 "编织" 在一起，这就叫AOP
	目的：
	》与业务无关，却为业务模块所共同调用的逻辑或责任封装起来（事务处理、日志管理、权限控制）
	》减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性
	AOP当中的概念：
	》连接点（Joinpoint）	被代理类拦截的方法
	》切入点（Pointcut）   	在哪些类，哪些方法上切入（where）
	》通知（Advice）       	在方法执行的什么时候（when:方法前/方法后/方法前后）做什么（what:增强的功能）
	》切面（Aspect）		切面 = 切入点 + 通知，通俗点就是：在什么时机，什么地方，做什么增强！
	》目标（Target）		只代理的目标对象
	》织入（Weaving）		把切面加入到对象，并创建出代理对象的过程。（由 Spring 来完成）
	AOP 编程：（有空看）
	声明式AOP：
		通知类型：
		》MethodBeforeAdvice 前置通知
		》AfterReturningAdvice 后置通知
		》MethodInterceptor 环绕通知
		》ThrowsAdvice 异常抛出
		》IntroductionInterceptor 引介通知
		public class MyAspect implements  MethodInterceotor{
			public Object invoke (MethodInvocation mi) throws Throwable{
				...
			}
		}
		声明式工厂配置：
		//通知对象
		<bean id="myAspect" class="MyAspect"/>
		//代理对象
		<bean id="userDaoProxy">
			//代理接口
			<property name="interfaces" value="UserDao" />
			//通知对象
			<property name="interceptorNames" value="myAspect" />
			//代理方式 true 使用cglib false使用jdk
			<property name="proxyTragetClass" value="true" />
		</bean>
		
	基于注解的AOP：
		@AspectJ 定义一个切面
		@Before 定义前置通知
		@AfterReturning 定义后置通知
		@Around	定义环绕通知
		@AfterThrowing	定义抛出通知
		@After	定义最终通知
		@DeclareParents	定义引介通知
	基于xml的AOP：
		//目标对象
		package service;
		public class ProductService {
			public void doSomeService(){
				System.out.println("doSomeService");
			}
		}
		//拦截对象
		package aspect;
		import org.aspectj.lang.ProceedingJoinPoint;
		public class LoggerAspect {
			public Object log(ProceedingJoinPoint joinPoint) throws Throwable {
				System.out.println("start log:" + joinPoint.getSignature().getName());
				Object object = joinPoint.proceed();
				System.out.println("end log:" + joinPoint.getSignature().getName());
				return object;
			}
		}
		//基于xml的aop配置文件
		<bean name="productService" class="service.ProductService" />
		<bean id="loggerAspect" class="aspect.LoggerAspect"/>
		<!-- 配置AOP -->
		<aop:config>
			<!-- where：在哪些地方（包.类.方法）做增加 -->
			<aop:pointcut id="loggerCutpoint"
						  expression="execution(* service.ProductService.*(..)) "/>
			<!-- what:做什么增强 -->
			<aop:aspect id="logAspect" ref="loggerAspect">
				<!-- when:在什么时机（方法前/后/前后） -->
				<aop:around pointcut-ref="loggerCutpoint" method="log"/>
			</aop:aspect>
		</aop:config>
	两种代理的区别： 
		https://blog.csdn.net/doujinlong1/article/details/80680149
	
spring的优势：
	》1、低侵入、低耦合
	》2、声明式事务管理
	》3、方便集成其他框架（MyBatis Hibernate）
	》4、降低开发难度
	》5、一站式提供了J2EE三层的解决方案
	
spring能做什么：
	》能帮我们根据配置文件创建及组装对象之间的依赖关系——对象之间的依赖关系
	》面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制
	》非常简单的帮我们管理数据库事务
	》提供了与第三方的数据访问框架无缝集成，并提供一套JDBC访问模块来方便访问数据库
		MyBatis集成：
			1、通过bean配置爱datasource
			<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			2、通过bean配置SqlSession工厂：
			<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			3、通过bean配置扫描配置文件
			<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		getCurrentSession和openSession的区别
			1.getCurrentSession的方式会在事务结束时自动关闭连接，而openSession则需要手动关闭连接。
			2.采用getCurrentSession创建的session会绑定带当前的线程中去，但openSession则不会。
	》提供了与第三方web框架的无缝集成，并提供了一套springMVC框架方便web层搭建
	》方便的与javaEE（java Mail、任务调度）整合，与更多技术整合（如缓存框架）

spring框架（模块）结构：
	》如图：spring模块结构.PNG
	》Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。
	》Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。
	》AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。
	》Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。
	》Test模块支持使用JUnit和TestNG对Spring组件进行测试。
	
事务：
	声明式事务：
		原理解析：
		》1、Spring 的声明式事务管理在底层是建立在 AOP 的基础上。其本质是在方法前后进行拦截，
		》》然后在目标方法开始之前创建一个事务，在执行这目标方法结束后，根据执行情况提交或进行回滚事务。
		》2、声明式事务最大的优点就是不需通过编程的方式而进行管理事务，
		》》这样就不需要在业务逻辑代码中掺杂事务管理的代码，
		》》只需在配置文件中做相关的事务规则声明，便可将事务规则应用到业务逻辑中。
		》3、声明式事务不足的地方在于，与编程式事务相比，只能作用到方法级别，
		》》无法像编程式事务那样可以作用到代码块级别。
		配置配置文件：
		》配置见：声明式事务配置文件1.png，声明式事务配置文件2.png
		》tx.method解析 见：tx.method解析.PNG
		》需要将openSession获取会话的方式改为getCurrentSession：
		》openSession与getCurrentSession两者的区别：
		》》1.getCurrentSession的方式会在事务结束时自动关闭连接，而openSession则需要手动关闭连接。
		》》2.采用getCurrentSession创建的session会绑定带当前的线程中去，但openSession则不会。
		@Transactional注解定义事务：
		》@Transactional    
		》》注解一个类表示所有方法都加入事务管理  
		》》注解一个方法表示该方法加入事务管理
		》<tx:annotation-driven transaction-manager="transactionManager"/>
	编程式事务：
	》

IoC 如何实现：
	》1、读取标注或者配置文件
	》2、使用反射的API，基于类名实例化对应的对象实例
	》3、将对象实例，通过构造函数或者 setter，传递给对象
	
所运用到的一些设计模式：
	1.工厂模式，这个很明显，在各种BeanFactory以及ApplicationContext创建中都用到了；
	2.模版模式，这个也很明显，在各种BeanFactory以及ApplicationContext实现中也都用到了；
	3.代理模式，在Aop实现中用到了JDK的动态代理；
	4.单例模式，这个比如在创建bean的时候。
	5.Tomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，
	但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法。
	6.策略模式在Java中的应用，这个太明显了，因为Comparator这个接口简直就是为策略模式而生的。
	Comparable和Comparator的区别一文中，详细讲了Comparator的使用。比方说Collections里面有一个sort方法，
	因为集合里面的元素有可能是复合对象，复合对象并不像基本数据类型，可以根据大小排序，复合对象怎么排序呢？
	基于这个问题考虑，Java要求如果定义的复合对象要有排序的功能，就自行实现Comparable接口或Comparator接口.
	（实例化对象的时候用到Strategy模式）
	7.原型模式：使用原型模式创建对象比直接new一个对象在性能上好得多，因为Object类的clone()方法是一个native方法，
	它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。
	8.迭代器模式：Iterable接口和Iterator接口 这两个都是迭代相关的接口，可以这么认为，实现了Iterable接口，
	则表示某个对象是可被迭代的；Iterator接口相当于是一个迭代器，实现了Iterator接口，
	等于具体定义了这个可被迭代的对象时如何进行迭代的	
	9.包装器（decorator）
	Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。
	基本上都是动态地给一个对象添加一些额外的职责。 
	
面试题：
	Spring面试题
	1、spring在ssm中起什么作用？
	》spring：轻量级框架
	》作用：bean工厂，用来管理bean的生命周期和框架集成
	》两大核心：IOC/DI（控制反转/依赖注入）：把dao依赖注入到service层，service层反转给action层，spring顶层容器为BeanFactory
	》》AOP：面向切面编程
	
	2、Spring的事务？
	》编程式事务管理：式管理事务，极大灵活性，难维护。
	》声明式事务管理：可以将编程方业务代码和事务管理分离，用注解和xml配置来管理事务。
	
	3、IOC在项目中的作用？
	》作用：Ioc解决对象之间的依赖问题，把所有Bean的依赖关系通过配置文件或注解关联起来，降低了耦合度。
	
	4、Spring的配置文件中的内容？
	》开启事务注解驱动
	》事务管理器
	》开启注解功能，并配置扫描包。
	》配置数据库
	》配置SQL会话工厂，别名，映射文件
	》不用编写Dao层的实现类
	
	5、Spring下的注解？
	》注册：@Controller @Service @Component @Repository（dao层）
	》注入：@Autowired @Resource
	》请求地址：@RequestMapping
	》返回具体数据类型而非跳转：@ResponseBody
	
	6、SpringDI的三种方式
	》构造器注入：通过构造方法初始化
	》》<constructor-arg index="0" type="java.lang.String" value="baoma" />
	》setter方法注入：通过setter方法初始化
	》》<property name="id" value="baoma" />
	》接口注入
	
	7、Spring主要使用了什么模式？
	》工厂模式：每个Bean的创建通过方法
	》单例模式：默认的每个Bean的作用域都是单例
	》代理模式：关于Aop的实现通过代理模式
	
	8、IOC/AOP的实现原理？
	》IOC：通过反射机制生成对象注入
	》AOP：动态代理
与EJB的区别：
	》借鉴https://www.cnblogs.com/strugglion/p/6027318.html
	》EJB
		最初的设计思想是为了分布式的应用服务的，分布式是正对大型应用构造的跨平台的协作计算，
		但现如今很多的应用不需要采用分布式的解决方案，因此用EJB显得臃肿。
	》目标都是为了松耦合POJO类提供中间件服务
	》EJB实现技术
		实现原理：就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。
		是运行在独立服务器上的组件。客户端是通过网络对EJB对象进行调用的。在java中，能够实现远程
		对象调用的技术是RMI，而EJB技术的基础是RMI。通过RMI技术，J2EE将EJB组件创建为远程对象
		客户端就可以通过网络调用EJB对象了
	》EJB 服务集群
		RMI 是将各种任务与功能的类放到不同的服务器上
		通过各个服务器间建立的调用规则实现分布式的运算，即"服务群集"
	》瓶劲
		各个功能模块（服务器）都访问同一个数据库时，会造成数据库查询负载的问题
		然而每一个功能服务器都部署一个数据库，那么会面临着数据如何共享的问题
		网络面临压力大，广域网互联带宽低，
EJB的基础RMI：
	》Java远程方法调用，即Java RMI（Java Remote Method Invocation）
		RMI全部的宗旨就是尽可能简化远程接口对象的使用。
	》（Remote Procedure Call, RPC）可以用于一个进程调用另一个进程
		（很可能在另一个远程主机上）中的过程，从而提供了过程的分布能力。
		Java 的 RMI 则在 RPC 的基础上向前又迈进了一步，即提供分布式对象间的通讯。
	》RMI包含部分
		远程服务的接口定义
		远程服务接口的具体实现
		桩（Stub）和框架（Skeleton）文件
		一个运行远程服务的服务器
		一个RMI命名服务，它允许客户端去发现这个远程服务
		类文件的提供者（一个HTTP或者FTP服务器）
		一个需要这个远程服务的客户端程序
	》RMI的用途
		为分布式Java应用程序之间的远程通信提供服务，提供分布式服务。
		应用：Spring和EJB均封装了RMI技术
	》在Spring中实现RMI：
		在服务器端定义服务的接口，定义特定的类实现这些接口；
		在服务器端使用org.springframework.remoting.rmi.RmiServiceExporter类来注册服务；
		在客户端使用org.springframework.remoting.rmi.RmiProxyFactoryBean来实现远程服务的代理功能；
		在客户端定义访问与服务器端服务接口相同的类
	
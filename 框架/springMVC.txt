目录：
	》简介
	》总体框架/具体流程
	》包装类型pojo参数绑定
	》SpringMVC校验
	》数据回显
	》异常处理
	》上传图片
	》拦截器拦
	》AOP、截器和过滤器的区别
	》能做什么
	》优势
	》面试题
	》所运用到的一些设计模式
	》应用：https://www.jianshu.com/p/b5e8716e6552 全面总结 有案例
简介：
	》负责web个层次的衔接
	》SpringMVC负责请求的转发和视图管理
	》接收外部请求，解析参数传给服务层
	
总体框架/具体流程：（见图springMVC具体步骤.png、SpringMVC总体框架步骤流程图.png）
	1、请求				--》DispatcherServlet	进行全局流程控制
	2、DispatcherServlet--》HandlerMapping		Handler(处理器)映射
	3、DispatcherServlet--》HandlerAdapter      将处理器包装为适配器 使之支持多种处理器
	4、HandlerAdapter   --》Handler 			处理器功能处理方法的调用
	5、ModelAndView逻辑视图名--》ViewResolver	将逻辑视图名解析为具体的view
	6、view				--》渲染				根据传进来的Model模型数据进行渲染
	7、返回控制权给DispatcherServlet，有DispatcherServlet返回响应给用户

包装类型pojo参数绑定：（通俗讲就是前端页面的数据传向服务器端）
	》方法一：在形参中 添加HttpServletRequest request参数，通过request接收前台参数
	》方法二：在形参中让包装类型的pojo接收前台参数--此处前台页面的参数自动传入到包装类型中
		举例：
		<form action="" method="">
			<inupt name="此处使用后台包装类型的属性值" />//当提交时该参数会传入包装类型中
			<input type="submit" vlaue="提交"/>
		</form>
		@RequestMapping("...")
		public ModelAndView queryItems(HttpServletRequest request, 包装类型对象 obj){
			//不需任何处理包装类型中的当前属性直接有值
			...
		}
	
SpringMVC校验：
	》当前校验知识点不足，需百度再找，现在认为不是重点，所以只是了解
	》通常使用最多的是前端的校验，比如js校验。对于安全性较高的在服务端校验
	*控制层校验：校验页面请求参数的合法性。
	*业务层教案：校验关键业务参数
	*持久层不进行校验
	》1、配置文件中配置校验器
	》2、校验器注入到处理器适配器中
	》3、POJO中添加校验规则
		public class Test{
			@Size(min=1,max=30,message="",group={})
			private String name;
		}
	》4、捕获校验错误信息指定分组的校验
	》5、页面显示错误信息
数据回显：
	》提交后，如果出现错误，将刚才提交的数据回显到刚才的提交页面。原封不动的回显之前提交的信息
	1、SpringMVC默认对pojo数据进行回显 
		key等于pojo类型（首字母小写） ，可能回显的是一个对象
		使用的话可以使用例如${items.id} 类似于这样的方式获取一些字段
	2、@ModelAttribute可以将方法返回值传到页面
		@RequestMapping("...")
		public String test(Model model, ...){
			model.addAttribute("allErrors", allErrors);
			...
			return "...";
		}
	
异常处理：
	》系统异常有两类：预期异常和运行时异常RuntimeException
	》系统的dao、service、controller出现都通过throws Exception向上抛出，
	》》最后由springmvc前端控制器交由异常处理器（ExceptionResolver）进行异常处理
	》全局异常处理器 只要实现HandlerExceptionResolver接口就是全局异常处理器
	》见https://www.jianshu.com/p/b5e8716e6552
	
上传图片：
	在springMvc.xml中配置multipart类型的解析器 
	<!-- 文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>
	》见https://www.jianshu.com/p/b5e8716e6552
	
拦截器：
	》经测试发现，interceptor先于AOP执行。
	简介：
	》Spring Web MVC的处理器拦截器
	常见应用场景：
	拦截器接口：
	》HandlerInterceptor接口
	》preHandle：预处理 返回值：ture表示继续流程 false表示流程中断
	》postHandle:后处理
	》afterCompletion:整个请求完成完毕。通常用于最后关闭资源、资源清理
	适配器：
	》HandlerInterceptorAdapter
	引用：https://jinnianshilongnian.iteye.com/blog/1670856/
	》》内容：拦截器的介绍、完整案例、各种场景的应用代码案例
	》》标题：第五章 处理器拦截器详解
	
AOP、拦截器和过滤器的区别：
	AOP：
	》只能拦截Spring管理的Bean的访问（业务service）
	过滤器：
	》Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序
	》主要的用途是设置字符集、控制权限、控制转向、做一些业务逻辑判断等。
	拦截器：
	》在struts.xml中配置
	》拦截是AOP的一种实现策略。
	》拦截器将很多功能从我们的Action中独立出来，大量减少了我们Action的代码，起到重用的作用
	Filter与Interceptor联系与区别
	》拦截器是基于java的反射机制，使用代理模式，而过滤器是函数回调（是一个前置条件判断）
	》拦截器不依赖于servlet容器，过滤器依赖于servlet容器
	》拦截器只能对action器作用，而过滤器可以对机乎所有的请求起作用（可以保护资源）
	》拦截器可以访问action上下文，堆栈里面的对象，而过滤器不可以。
	》执行顺序：过滤前--拦截前--Action处理--拦截后--过滤后
	》AOP是一种编程思想，把相同的代码抽取出来，过滤器只是过滤请求
	》图示拦截过程：见图示拦截过程.png
	》在Action中的使用：
		顺序：
			1、编写自定义拦截器类 需实现Interceptor 或者继承一个自定义的AbstractAction类（继承好处多多）
			2、在xml中声明自定义拦截器
			3、在xml中的Action使用拦截器
	总结：
	》Spring的Interceptor(拦截器)与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，
	》》都能实现权限检查、日志记录等
	》1.过滤器：所谓过滤器顾名思义是用来过滤的，在java web中，
	》》你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，
	》》然后再传入servlet或者struts的action进行业务逻辑，
	》》比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,
	》》或者在传入servlet或者struts的action前统一设置字符集，
	》》或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。
	》》filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，
	》》被下一个filter, servlet接收等。
	》2.java的拦截器 主要是用在插件上，扩展件上比如 hibernate spring struts2等 有点类似面向切片的技术，
	》》在用之前先要在配置文件即xml文件里声明一段的那个东西。
	引用：
	》https://www.cnblogs.com/junzi2099/p/8022058.html 
	》》内容：详细的比较、详细区别表、清晰、良好的总结
	》》标题：过滤器（Filter）与拦截器（Interceptor )区别
	》https://blog.csdn.net/u010061060/article/details/80327348
	》》内容：简易、过滤拦截运行过程图解
	》》标题：面向切面（Spring Aop）、拦截器、过滤器的区别
	
SpringMVC中的常用注解及其作用：
	》@RequestMapping 请求和方法映射
	》@RequestBody    接收客户端传入的JSON数据
	》@ResponceBody   返回客户端JSON数据	
	》@Controller     标识控制层
	》@Service        标识业务层
	》@Repository     标识数据层
	》@Component      把bean添加到Spring容器中
	》@Autowired      按照类型自动注入
	》@Resource       自定义注入，可以按照类型注入 也可以按照名字注入
	》@PathVariable   RESTful风格时使用
	》@Param		  表单参数和方法形参不一样时使用
	
优势：
	》强大的灵活性、非侵入性和可配置性
	
设计模式：
	》解析XML及其xml接点时候,使用的是工厂模式  代理模式  
	》单例模式
	》springmvc中对handler的处理使用了适配器模式
		springmvc通过HandlerMapping获取到可以处理的handler，这些handler的类型各不相同，
		对请求的预处理，参数获取都不相同，最简单的做法是根据不同的handler类型，做一个分支处理，
		不同的handler编写不同的代码。以上是违反了开闭原则的，显然这只能使用适配器模式
		*将handler交给适配器HandlerAdapter去处理，这样DispatcherServlet交互的类就只剩下一个接口，
		HandlerAdapter，符合迪米特法则
		*将handler交给HandlerAdapter处理后，不同类型的handler被对应类型的HandlerAdapter处理，
		每个HandlerAdapter都只完成单一的handler处理，符合单一职责原则；
		*如果需要新增一个类型的handler，只需要新增对应类型的HandlerAdapter就可以处理，
		无需修改原有代码，符合开闭原则。
		结论：不同的handler的不同处理方式，就在HandlerAdapter中得到了适配，
		对于DispatcherServlet来将，只需要统一的调用HandlerAdapter的handle()方法就可以了，
		无需关注不同handler的处理细节。
		public class Baskball {
			public void play(String sth){
				Syso(sth);
			}
		}
		public class Football {
			pulic void footPlay(int num , String sth){
				Syso(num+sth);
			}
		}
		//此处的BallAdapter相当于HandlerAdapter 从此看出交互的类确实只有一个BallAdapter/HandlerAdapter 
		public class BaskballAdapter implements BallAdapter{
			public String playBall(Object obj){
				((Baskball)obj).play("yyy");
			}
		}
		public class FootballAdapter implements BallAdapter{
			public String playBall(Object obj){
				((Baskball)obj).playBall(1, "yyy");
			}
		}
	》组合模式 将不同的配置整合在了同一个整体类中
		》springMVC通过组合模式，使得用户或者说框架本身在进行配置时，
		》》就通过操作WebMvcConfigurer类及其衍生类这个整体就行了。
		》https://blog.csdn.net/ljw761123096/article/details/79834854
	
能做什么：
	》SpringMVC负责请求的转发和视图管理

SpringMVC面试题
		1、SpringMVC的控制器是不是单例模式，如果是；有什么问题，怎么解决？
		》问题： SpringMVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？
		》解决：是单例模式，所以在多线程访问的时候有线程安全问题，不要用同步，会影响性能，
		》解决方案是在控制器里面不能写字段。
		
		2、SpringMVC中控制器的注解？
		》@Controller：该注解表明该类扮演控制器的角色
		
		3、@RequestMapping 注解用在类上的作用？
		》作用：用来映射一个URL到一个类或者一个特定的处理方法上
		
		4、前台多个参数，这些参数都是一个对象，快速得到对象？
		》方法：直接在方法中声明这个对象，SpringMVC就自动把属性赋值到这个对象里面
		
		5、SpringMVC中函数的返回值？
		》String、ModelAndView，List，Set等
		》一般String，Ajax请求，返回一个list集合
		
		6、SpringMVC中的转发和重定向？
		》转发：return  hello
		》重定向：return  redirecthello.jsp
		
		7、SpringMVC和Ajax之间的相互调用？
		》通过JackSon框架把java里面对象直接转换成js可识别的json对象，具体步骤如下：
		》加入jackSon.jar
		》在配置文件中配置json的映射
		》在接收Ajax方法里面直接返回Object，list等，方法前面需要加上注解@ResonanceBody
		
		8、SpringMVC工作流程图？
		》图片见当前目录（springmvc工作流程.png）
		
		9、Struts2和SpringMVC的区别？
		》入口不同：
		》Struts2：filter过滤器
		》SpringMVC：一个Servlet即前端控制器
		》开发方式不同：
		》Struts2：基于类开发，传递参数通过类的属性，只能设置为多例
		》SpringMVC：基于方法开发（一个url对应一个方法），请求参数传递到方法形参，可以为单例也可以多例
		》请求方法不同：
		》Struts2：值栈存储请求和响应的数据，通过OGNL存取数据
		》SpringMVC：通过参数解析器将request请求内容解析，给方法形参复制，将数据和视图封装成ModelAndView对象，
		》》最后又将ModelAndView中的模型数据通过request域传输到页面，jsp视图解析器默认使用的是jstl。
目录：
	概念
	同类型
	特性
	应用场景
	优势
	缺点
	数据类型
	复制Replication
	事务transaction
	Redis发布订阅与成熟MQ的比较
	持久化
	架构模式
	常用命令
	面试问题

引用：	
	相关知识点以及redis通讯协议resp
		https://www.cnblogs.com/jasontec/p/9699242.html

概念：
	redis是一个基于内存，通过键值对的形式来存储数据的NoSQL数据库
	
	//Redis是一个使用ANSIC编写的开源的数据库
	//Redis是NoSQL数据库之一，其中包含多种数据结构、支持网络、基于内存以及它拥有键值对存储结构，

同类型：
	HBase、Redis、MongoDB、Couchbase、LevelDB
	https://blog.csdn.net/sunzhiwei_/article/details/81566984

特性：
	1.基于内存运行，性能高效
	2.支持分布式，理论上可以无限扩展
	3.key-value存储系统
	4.开源的使用ANSIC语言编写、遵守BSD协议、
	支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API
	5.提供多种语言的API
	
应用场景：
	缓存系统/缓存数据库（“热点”数据：高频读、低频写）
	计数器
	消息队列系统
	排行榜
	社交网络和实时系统

优势：
	* 性能极高 		-- 基于内存，读写能力强
	* 丰富的数据类型-- 支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作
	* 原子 			-- Redis的所有操作都是原子性的，//同时Redis还支持对几个操作全并后的原子性执行。
	* 丰富的特性 	-- Redis还支持 publish/subscribe, 通知, key 过期等等特性

缺点：	
	引用：https://blog.csdn.net/gongpulin/article/details/80551438 核心概念
	
	Redis并不支持事务回滚

		只有事务提交
		
		Redis只有命令执行错误或者存储类型出错的时候，才会报错，而且事务不用回滚，
		所以Redis在生产环境中的运行基本是无阻的，速度很快。

	　　但，正因为没有事务回滚，所以存储比较重要的数据，会出现丢失数据的问题。

		所以比较重要的数据都不会存储在Redis中的，比如有关钱方面的东西，不会存到Redis中的。
		依然使用关系型数据库MySQL或者Oracle。
	
数据类型：
	String类型
		string类型是二进制安全的。意思是redis的string可以包含任何数据。
		比如jpg图片或者序列化的对象 。
		string类型是Redis最基本的数据类型，一个键最大能存储512MB。
		使用
			格式: set key value 
			
	哈希类型
		Redis hash 是一个键值(key=>value)对集合。
		Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。
		使用
			格式: hmset name  key1 value1 key2 value2
		
	列表类型
		Redis 列表是简单的字符串列表，按照插入顺序排序。
		你可以添加一个元素到列表的头部（左边）或者尾部（右边）
		Redis的列表类型键可以用来实现队列，并且支持阻塞式读取，
		》可以很容易的实现一个高性能的优先队列
			lpush和rpop实现生产消费
			brpop和blpop实现阻塞读取
		
		使用
			格式: lpush  name  value
			在 key 对应 list 的头部添加字符串元素
			格式: rpush  name  value
			在 key 对应 list 的尾部添加字符串元素
			格式: lrem name  index
			key 对应 list 中删除 count 个和 value 相同的元素
			格式: llen name  
			返回 key 对应 list 的长度
			
	集合类型 
		Redis 的 Set 是 string 类型的无序集合
		集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)
		使用：
			格式: sadd  name  value
			Redis的Set是string类型的无序集合。
			
	顺序集合类型
		Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。
		有序集合类型，每个元素都会关联一个double类型的分数权值，
		》通过这个权值来为集合中的成员进行从小到大的排序。
		使用
			格式: zadd  name score value	
			Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。

复制Replication：
	引用：https://blog.csdn.net/gongpulin/article/details/80551438 核心概念
	
	Redis 支持简单且易用的主从复制（master-slave replication）功能， 该功能可以让从服务器(slave server)
	成为主服务器(master server)的精确复制品。
	
	复制原理：
		* 从服务器都将向主服务器发送一个 SYNC 命令。
		* 接到 SYNC 命令的主服务器将开始执行 BGSAVE ， 并在保存操作执行期间， 将所有新执行的写入命令都保存到一个缓冲区里面。
		* 当 BGSAVE 执行完毕后， 主服务器将执行保存操作所得的 .rdb 文件发送给从服务器
		* 从服务器接收这个 .rdb 文件， 并将文件中的数据载入到内存中。
		* 主服务器会以 Redis 命令协议的格式， 将写命令缓冲区中积累的所有内容都发送给从服务器
	
	只读从服务器
		从 Redis 2.6 开始， 从服务器支持只读模式， 并且该模式为从服务器的默认模式。
		只读模式由 redis.conf 文件中的 slave-read-only 选项控制， 也可以通过 CONFIG SET 命令来开启或关闭这个模式。
		只读从服务器会拒绝执行任何写命令， 所以不会出现因为操作失误而将数据不小心写入到了从服务器的情况。
	
	关于复制的几个重要方面：
		1.Redis 使用异步复制。 从 Redis 2.8 开始， 从服务器会以每秒一次的频率
		向主服务器报告复制流（replication stream）的处理进度。
		
		2.一个主服务器可以有多个从服务器。
		
		3.不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器， 
		多个从服务器之间可以构成一个图状结构。
		
		4.复制功能不会阻塞主服务器： 即使有一个或多个从服务器正在进行初次同步，
		主服务器也可以继续处理命令请求。
		
		5.复制功能也不会阻塞从服务器： 只要在redis.conf文件中进行了相应的设置， 
		即使从服务器正在进行初次同步， 服务器也可以使用旧版本的数据集来处理命令查询。
		
		不过， 在从服务器删除旧版本数据集并载入新版本数据集的那段时间内， 连接请求会被阻塞。
		
		你还可以配置从服务器， 让它在与主服务器之间的连接断开时， 向客户端发送一个错误。
		
		6.复制功能可以单纯地用于数据冗余（data redundancy）， 
		也可以通过让多个从服务器处理只读命令请求来提升扩展性（scalability）： 
		比如说， 繁重的SORT 命令可以交给附属节点去运行。
		
		7.可以通过复制功能来让主服务器免于执行持久化操作： 只要关闭主服务器的持久化功能，
		然后由从服务器去执行持久化操作即可。

事务transaction：
	引用：https://blog.csdn.net/gongpulin/article/details/80551438 核心概念
	事务可以一次执行多个命令
		
Redis发布订阅与成熟MQ的比较
	（1）MQ支持多种消息协议，包括AMQP，MQTT，Stomp等，并且支持JMS规范，
	但Redis没有提供对这些协议的支持； 
	（2）MQ提供持久化功能，但Redis无法对消息持久化存储，一旦消息被发送，
	如果没有订阅者接收，那么消息就会丢失； 
	（3）MQ提供了消息传输保障，当客户端连接超时或事务回滚等情况发生时，
	消息会被重新发送给客户端，Redis没有提供消息传输保障。

持久化
	两种持久化
	RDB
		是Redis DataBase
		功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数
		
	AOF 
		是Append-only file
		每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作
		aof写入保存：
			WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件
			SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。
	
	触发
		RDB持久化的触发分为手动触发和自动触发两种。
		Redis服务器默认开启RDB，关闭AOF；要开启AOF，需要在配置文件中配置：appendonly yes
	
	比较：
		1、aof文件比rdb更新频率高，优先使用aof还原数据。
		2、aof比rdb更安全也更大
		3、rdb性能比aof好
		4、如果两个都配了优先加载AOF

架构模式
	单机版
		特点：
			简单
		缺点：
			1、内存容量有限 
			2、处理能力有限 
			3、无法高可用。
	主从复制
		描述：
			Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，
			其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 
			只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，
			主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。
		特点：
			1、master/slave 角色
			2、master/slave 数据相同
			3、降低 master 读压力在转交从库
		缺点：
			无法保证高可用
			没有解决 master 写的压力
	哨兵	
		描述：	
			Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。
		特性：
			监控（Monitoring）：    Sentinel  会不断地检查你的主服务器和从服务器是否运作正常。
			提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。
			自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。
		特点：
			1、保证高可用
			2、监控各个节点
			3、自动故障迁移
		缺点：
			主从模式，切换需要时间丢数据
			没有解决 master 写的压力
	集群（proxy 型）：
		描述：
			Twemproxy 是一个 Twitter 开源的一个 redis 和 memcache 快速/轻量级代理服务器； 
			Twemproxy 是一个快速的单线程代理程序，支持 Memcached ASCII 协议和 redis 协议。
		特点：
			1、多种 hash 算法：MD5、CRC16、CRC32、CRC32a、hsieh、murmur、Jenkins 
			2、支持失败节点自动删除
			3、后端 Sharding 分片逻辑对业务透明，业务方的读写方式和操作单个 Redis 一致
		缺点：
			增加了新的 proxy，需要维护其高可用。
		failover 逻辑需要自己实现，其本身不能支持故障的自动转移可扩展性差，进行扩缩容都需要手动干预

	集群（直连型）
		描述：
			从redis 3.0之后版本支持redis-cluster集群，Redis-Cluster采用无中心结构，
			每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。
		特点：
			1、无中心架构（不存在哪个节点影响性能瓶颈），少了 proxy 层。
			2、数据按照 slot 存储分布在多个节点，节点间数据共享，可动态调整数据分布。
			3、可扩展性，可线性扩展到 1000 个节点，节点可动态添加或删除。
			4、高可用性，部分节点不可用时，集群仍可用。通过增加 Slave 做备份数据副本
			5、实现故障自动 failover，节点之间通过 gossip 协议交换状态信息，用投票机制完成 Slave到 Master 的角色提升。
		缺点：
			1、资源隔离性较差，容易出现相互影响的情况。
			2、数据通过异步复制,不保证数据的强一致性

常用命令：
	省略
	https://www.cnblogs.com/jasontec/p/9699242.html

面试问题
	穿透：
		缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，
		》我们数据库的 id 都是1开始自增上去的，如发起为id值为 -1 的数据或 id 
		》为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大，
		》严重会击垮数据库。
	击穿：
		指一个Key非常热点，在不停的扛着大并发，当这个Key在失效的瞬间，持续的大并发就穿破缓存，
		》直接请求数据库，就像在一个完好无损的桶上凿开了一个洞。
	雪崩：
		由于redis设置失效时间，当所有key在同一时间失效，并发直接打入DB，导致DB崩溃。
	在生产环境中最好不能keys命令
		因为Redis是单线程的，KEYS 命令的性能随着数据库数据的增多而越来越慢，
		》使用 KEYS 命令时会占用唯一的一个线程的大量处理时间，引发Redis阻塞并且增加Redis的CPU占用
		》导致其他请求堵塞
		可以使用scan命令，从零开始查 返回结果会给一个游标数，下一条命令就可以这样写：
		》scan游标数，意思是接着下标往下找，达到一种分页的效果
		
	面试题，在页面的后部
	https://www.cnblogs.com/jasontec/p/9699242.html
	
	面试题知识点详细
	https://zhuanlan.zhihu.com/p/93515595
	Redis 的主从复制
		持久化保证了即使redis服务重启也不会丢失数据，因为redis服务重启后会将硬盘上持久化的数据恢复到内存中，
		但是当redis服务器的硬盘损坏了可能会导致数据丢失，如果通过redis的主从复制机制就可以避免这种单点故障，
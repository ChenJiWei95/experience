目录：
	》简介
	》三大核心
	》spring IoC和DI （DI注入的二种方式）
	》spring IOC和DI 注解操作 
	》bean的生命周期
	》配置文件
	》bean的三种实例化方式
	》bean的作用域
	》spring AOP
	》spring的优势
	》spring能做什么
	》spring框架（模块）结构
	》spring组成
	》事务
	》IoC 如何实现
	》面试题
	》所运用到的一些设计模式
	》与EJB的区别
	》EJB的基础RMI
	
简介：
	spring是一个轻量级的开源框架，给java应用程序的开发提供了基础性的支持
	通过beans容器对对象生命周期进行管理和对象之间的依赖关系，简化事务的操作
	//也为 J2EE 应用程序开发提供集成的框架
	//负责dao service web各个层次的衔接
	//以及两大核心IOC和AOP

三大核心：
	》AOP、DI、IOC

目的：
	与业务无关，却为业务模块所共同调用的逻辑或责任封装起来（事务处理、日志管理、权限控制）
	减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性

spring IoC和DI
	说你下你对Spring IOC的了解？
		Spring IOC（inversion of control）负责控制对象的生命周期和对象间的依赖关系。
		DI（Dependency Injetion）依赖注入：动态的向对象注入它所需要的对象。
		好处：降低对象之间的耦合度，使程序更加稳定。

	IOC Inverse of Control（控制反转）
	》这是一种设计思想，将原本程序中手动创建对象的控制权，交由spring框架来管理。
	DI Dependency Injection（依赖注入）
	》将对象依赖属性通过配置设值给该对象；容器将自动的注入所依赖的对象
		DI注入的三种方式：
		》接口注入 （注解自动注入）
			@Autowired+@Qualifier("userDAO")
			@Resource
			@Value 
		》setter注入
			<property name="name" value="张三"/>
		》构造方法注入	
			<bean id="user" class="com.kuang.pojo.User">
				<constructor-arg name="id" value="0000"/>
	优点:
		传统的代码，每个对象负责管理与自己需要依赖的对象，导致如果需要切换依赖对象的实现类时，
		需要修改多处地方。同时，过度耦合也使得对象难以进行单元测试。
		依赖注入把对象的创造交给外部去管理,很好的解决了代码紧耦合（tight couple）的问题，
		是一种让代码实现松耦合（loose couple）的机制。
		松耦合让代码更具灵活性，能更好地应对需求变动，以及方便单元测试。

bean的生命周期
	记忆：bean实例化，被容器注入到依赖处，对象会一直驻留在应用上下文中，直到应用上文被销毁
	//如果实现了DisposableBean接口，spring将调用它的distroy()接口方法。
	//如果bean使用了destroy-method属性声明了销毁方法，则该方法被调用；

	Spring对bean进行实例化，默认bean是单例；

	Spring对bean进行依赖注入；

	如果bean实现了BeanNameAware接口，spring将bean的id传给setBeanName()方法；

	如果bean实现了BeanFactoryAware接口，spring将调用setBeanFactory方法，将BeanFactory实例传进来；

	如果bean实现了ApplicationContextAware接口，它的setApplicationContext()方法将被调用，将应用上下文的引用传入到bean中；

	如果bean实现了BeanPostProcessor接口，它的postProcessBeforeInitialization方法将被调用；

	如果bean实现了InitializingBean接口，spring将调用它的afterPropertiesSet接口方法，类似的如果bean使用了init-method属性声明了初始化方法，该方法也会被调用；

	如果bean实现了BeanPostProcessor接口，它的postProcessAfterInitialization接口方法将被调用；

	此时bean已经准备就绪，可以被应用程序使用了，他们将一直驻留在应用上下文中，直到该应用上下文被销毁；

	若bean实现了DisposableBean接口，spring将调用它的distroy()接口方法。同样的，如果bean使用了destroy-method属性声明了销毁方法，则该方法被调用；

配置文件：
	如何开启注解
		spring在2.5版本之后开始支持注解的方式依赖注入
		注解装配在spring中是默认关闭的，所以需要在spring核心配置文件中手动开启
		配置如：<context:annotation-config/>

bean的三种实例化方式：
	构造器实例化
		<bean id="bean1" class="" ></bean>
	静态工厂实例化
		编写一个静态工厂类
		<bean id="bean1" class="" factory-method="createBean"></bean>
	实例工厂方式实例化
		编写一个工厂类
		<bean id="factoryBean" class=""/>
		<bean id="bean1" factory-bean="factoryBean" factory-method="createBean"/>
	
bean的作用域：（scope=""）
	Spring bean的作用域之间有什么区别? 每个用户分别在各自的域创建实例
	
	singleton：
		默认是单例模式。只有一个实例，对bean的引用始终将指向同一个对象。
	prototype：
		容器将创建一个新的bean实例
	request：
		对于同一次HTTP请求中，容器将返回同一个bean实例，反之。
	session：
	global Session： 
		当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。

spring IOC和DI 注解操作
	引用：https://blog.csdn.net/weixin_42166907/article/details/82919717
	注册：
		@Controller 控制层
		@Service 	业务层
		@Component 	通用，不提倡使用
		@Repository 持久层
	注入:
		@Autowired 	自动按照类型注入，使用注解注入时set方法可省略，使用注入对象的名称查找，找不到会报错
		@Qualifier 	按照类型注入的基础之上，在按照Bean的id注入。给字段注入时不能独立使用。value：指定bean的id
		@Resource 	直接按照bean的id注入。如果没有指定名称或找不到 则按照类型查找对象
		@Value  	注入基本数据类型和String类型数据的，可以使用el表达式读取properties文件中的属性
	通过注解完全遗弃配置文件 （aop怎么解决）  
		@Configuration 指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。
			获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。
		@ComponentScan 指定spring在初始化容器时要扫描的包。
			属性： basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。
		@PropertySource 用于加载.properties文件中的配置。此注解指定properties配置文件的位置。
			属性： value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:
		@Import 用于导入其他配置类，在引入其他配置类时
			属性： value[]：用于指定其他配置类的字节码。
		@Bean 只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。
			name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。
	
spring AOP: 
	学习链接：
	》https://blog.csdn.net/gavin_john/article/details/80278284
	》》切入点表达式的说明
	
	》https://www.jianshu.com/p/5b9a0d77f95f
	》》介绍概念、aop四种实现方式
	 
	介绍下Spring AOP：
		Spring AOP面向切面编程，在面向对象（oop）编程思想中，我们将事务抽象成一个个的对象，
		而在面向切面编程中，我们将一个个对象某些类似的方面横向抽成一个切面，
		对这个切面进行一些如权限控制，事务管理，记录日志等公用操作处理的过程就是面向切面的思想，
		AOP底层是动态代理，如果是接口采用的是JDK动态代理，如果是类采用CGLIB方式实现动态代理。
	 
	定义：
	》Aspect Oriented Program（面向切面编程） 
		在面向切面编程的思想里面，把功能分为核心业务功能，和周边功能。
			//所谓的核心业务，比如登陆，增加数据，删除数据都叫核心业务
			//所谓的周边功能，比如性能统计，日志，事务管理等等
		最后效果是：核心业务功能和切面功能分别独立进行开发，然后把切面功能和核心业务功能 "编织" 在一起，这就叫AOP
	
	摘抄定义： https://blog.csdn.net/wuruijiang/article/details/78970720
	》AOP称为面向切面编程，在程序开发中主要用来解决一些系统层面上的问题，
	》》比如日志，事务，权限等待 
	》
	》面向切面编程，是OOP的一种补充与完善，OOP所具备的是一种上的下的层次关系，
	》》而一些周边的功能代码如日志啊，这是散列在各个层次的所有对象之中。
	》》这是一种左到右的水平关系，而OOP不具备，当然也可编写进OOP各个层次当中，
	》》这样的代码不具备重用性的。而AOP我认为这也是解决这一问题的最佳解决方案，
	》》将核心业务中公共行为即周边的功能代码封装到一个可重用的模块当中
	》》达到了减少重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。
	
	实现：
	动态代理技术：  （代理的类需要实现一个或多个接口）
		利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；
		jdk动态代理
			如果目标类是接口类（目标对象实现了接口），则直接使用JDKproxy
		cglib动态代理
			当使用优化的代理策略后使用此模式
			不存在代理接口
		源码解说使用jdk动态代理和cglib代理
			https://blog.csdn.net/qq_41701956/article/details/84427891
	CGLIB和jdk动态代理的底层实现区别:https://blog.csdn.net/doujinlong1/article/details/80680149
		CGLIB
			//是一个功能强大，高性能的代码生成包。
			//它为没有实现接口的类提供代理，
		CGLIB原理：
			动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。
		CGLIB底层：
			通过字节码处理框架ASM，来转换字节码并生成新的类。
		jdk动态代理：
			底层是通过反射去实现代理类	
			
	静态织入：
		引入特定的语法创建“切面”，从而使得编译器可以在编译期间织入有关的“切面”代码。
	
	AOP当中的概念：
		连接点（Joinpoint）	被代理类拦截的方法
		切入点（Pointcut）   	就是带有通知的连接点，在程序中主要体现为书写切入点表达式
		通知（Advice）       	在方法执行的什么时候（when:方法前/方法后/方法前后）做什么（what:增强的功能）
		切面（Aspect）		通常是一个类，里面可以定义切入点和通知
		目标（Target）		被代理的对象
		织入（Weaving）		将切面应用到目标对象并导致代理对象创建的过程
	
	注解：
		@AspectJ 			定义一个切面
		@Before 			前置通知
		@After				后置通知
		@AfterReturning 	返回通知
		@AfterThrowing		异常通知
		@Around				环绕通知
		@DeclareParents		定义引介通知
		
	
	AOP 编程：（有空看）
		声明式AOP：
			通知类型：
			》MethodBeforeAdvice 		前置通知
			》AfterReturningAdvice 		后置通知
			》MethodInterceptor 		环绕通知
			》ThrowsAdvice 				异常抛出
			》IntroductionInterceptor 	引介通知
			public class MyAspect implements  MethodInterceotor{
				public Object invoke (MethodInvocation mi) throws Throwable{
					...
				}
			}
			声明式工厂配置：
			//通知对象
			<bean id="myAspect" class="MyAspect"/>
			//代理对象
			<bean id="userDaoProxy">
				//代理接口
				<property name="interfaces" value="UserDao" />
				//通知对象
				<property name="interceptorNames" value="myAspect" />
				//代理方式 true 使用cglib false使用jdk
				<property name="proxyTragetClass" value="true" />
			</bean>
			
		基于注解的AOP： 
			
		基于xml的AOP：
			//目标对象
			package service;
			public class ProductService {
				public void doSomeService(){
					System.out.println("doSomeService");
				}
			}
			//拦截对象
			package aspect;
			import org.aspectj.lang.ProceedingJoinPoint;
			public class LoggerAspect {
				public Object log(ProceedingJoinPoint joinPoint) throws Throwable {
					System.out.println("start log:" + joinPoint.getSignature().getName());
					Object object = joinPoint.proceed();
					System.out.println("end log:" + joinPoint.getSignature().getName());
					return object;
				}
			}
			//基于xml的aop配置文件
			<bean name="productService" class="service.ProductService" />
			<bean id="loggerAspect" class="aspect.LoggerAspect"/>
			<!-- 配置AOP -->
			<aop:config>
				<!-- where：在哪些地方（包.类.方法）做增加 -->
				<aop:pointcut id="loggerCutpoint"
							  expression="execution(* service.ProductService.*(..)) "/>
				<!-- what:做什么增强 -->
				<aop:aspect id="logAspect" ref="loggerAspect">
					<!-- when:在什么时机（方法前/后/前后） -->
					<aop:around pointcut-ref="loggerCutpoint" method="log"/>
				</aop:aspect>
			</aop:config> 
		
	
spring的优势：
	》1、低侵入、低耦合
	》2、声明式事务管理
	》3、方便集成其他框架（MyBatis Hibernate）
	》4、降低开发难度
	》5、一站式提供了J2EE三层的解决方案
	
spring能做什么：
	》能帮我们根据配置文件创建及组装对象之间的依赖关系——对象之间的依赖关系
	》面向切面编程能帮助我们无耦合的实现日志记录，性能统计，安全控制
	》非常简单的帮我们管理数据库事务
	》提供了与第三方的数据访问框架无缝集成，并提供一套JDBC访问模块来方便访问数据库
		MyBatis集成：
			1、通过bean配置爱datasource
			<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			2、通过bean配置SqlSession工厂：
			<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
			3、通过bean配置扫描配置文件
			<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		getCurrentSession和openSession的区别
			1.getCurrentSession的方式会在事务结束时自动关闭连接，而openSession则需要手动关闭连接。
			2.采用getCurrentSession创建的session会绑定带当前的线程中去，但openSession则不会。
	》提供了与第三方web框架的无缝集成，并提供了一套springMVC框架方便web层搭建
	》方便的与javaEE（java Mail、任务调度）整合，与更多技术整合（如缓存框架）

spring框架（模块）结构：
	》如图：spring模块结构.PNG
	》Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块。
	》Web层包含了Web、Web-Servlet、WebSocket、Web-Porlet模块。
	》AOP模块提供了一个符合AOP联盟标准的面向切面编程的实现。
	》Core Container(核心容器)：包含有Beans、Core、Context和SpEL模块。
	》Test模块支持使用JUnit和TestNG对Spring组件进行测试。
	
spring组成：
	》Spring Core、 Spring AOP、 Spring ORM、 Spring DAO、
	》Spring Context、 Spring Web和 Spring Web MVC
	
事务：
	4种特性：
		查看数据库综合.txt
	4种隔离级别
		查看数据库综合.txt
	编程式事务管理：
		极大灵活性，难维护。
	声明式事务管理：
		可以将编程方业务代码和事务管理分离，用注解和xml配置来管理事务。
	
		原理解析：
			1、Spring 的声明式事务管理在底层是建立在 AOP 的基础上。其本质是在方法前后进行拦截，
			然后在目标方法开始之前创建一个事务，在执行这目标方法结束后，
			根据执行情况提交或进行回滚事务。
			2、声明式事务最大的优点就是不需通过编程的方式而进行管理事务，
			这样就不需要在业务逻辑代码中掺杂事务管理的代码，
			只需在配置文件中做相关的事务规则声明，便可将事务规则应用到业务逻辑中。
			3、声明式事务不足的地方在于，与编程式事务相比，只能作用到方法级别，
			无法像编程式事务那样可以作用到代码块级别。
			
		配置文件：
			配置见：声明式事务配置文件1.png，声明式事务配置文件2.png
			tx.method解析 见：tx.method解析.PNG
			需要将openSession获取会话的方式改为getCurrentSession：
			openSession与getCurrentSession两者的区别：
				1.getCurrentSession的方式会在事务结束时自动关闭连接，而openSession则需要手动关闭连接。
				2.采用getCurrentSession创建的session会绑定带当前的线程中去，但openSession则不会。
				
		@Transactional注解定义事务：
			@Transactional    
				注解一个类表示所有方法都加入事务管理  
				注解一个方法表示该方法加入事务管理
			<tx:annotation-driven transaction-manager="transactionManager"/>
			
		声明式事务管理有两种常用的方式：
			基于tx和aop名字空间的xml配置文件
			基于@Transaction注解
			配置方式：
				配置事务管理器
				事务的策略（这里可以配置事务的隔离级别，传播属性，是否可读等）
				配置事务的切入点，注入事务属性
			注解方式：
				配置事务管理器
				开启事务控制的注解支持
				在类或者方法上面添加@Transaction，事务的属性都在该注解的属性上设置

IoC 如何实现：
	1、读取标注或者配置文件
	2、使用反射的API，基于类名实例化对应的对象实例
	3、将对象实例，通过构造函数或者 setter，传递给对象
	
所运用到的一些设计模式：
	1.工厂模式，这个很明显，在各种BeanFactory以及ApplicationContext创建中都用到了；
	2.模版模式，这个也很明显，在各种BeanFactory以及ApplicationContext实现中也都用到了；
	3.代理模式，在Aop实现中用到了JDK的动态代理；
	4.单例模式，这个比如在创建bean的时候。
	5.Tomcat中有很多场景都使用到了外观模式，因为Tomcat中有很多不同的组件，每个组件需要相互通信，
		但又不能将自己内部数据过多地暴露给其他组件。用外观模式隔离数据是个很好的方法。
	6.策略模式在Java中的应用，这个太明显了，因为Comparator这个接口简直就是为策略模式而生的。
		Comparable和Comparator的区别一文中，详细讲了Comparator的使用。比方说Collections里面有一个sort方法，
		因为集合里面的元素有可能是复合对象，复合对象并不像基本数据类型，可以根据大小排序，复合对象怎么排序呢？
		基于这个问题考虑，Java要求如果定义的复合对象要有排序的功能，就自行实现Comparable接口或Comparator接口.
		（实例化对象的时候用到Strategy模式）
	7.原型模式：使用原型模式创建对象比直接new一个对象在性能上好得多，因为Object类的clone()方法是一个native方法，
		它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。
	8.迭代器模式：Iterable接口和Iterator接口 这两个都是迭代相关的接口，可以这么认为，实现了Iterable接口，
		则表示某个对象是可被迭代的；Iterator接口相当于是一个迭代器，实现了Iterator接口，
		等于具体定义了这个可被迭代的对象时如何进行迭代的	
	9.包装器（decorator）
		Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。
		基本上都是动态地给一个对象添加一些额外的职责。 
	
面试题： 
	@Autowried和@Resource的区别
		两者都是用来装配bean的, 可作用于字段上, 也可以作用于setter方法上。
		@Autowried：
			spring的注解
			默认情况下要求对象必须存在, 它要求依赖对象必须存在. 若允许null值, 
			可以设置它的required为false.
			@Autowried
			@Qualifier("admin")
			private AdminDAO adminDAO;
		@Resource：
			j2ee的注解
			默认按照名称来装配注入, 只有找不到与名称匹配的bean才会按照类型来注入。
			
	Spring面试题
	1、spring在ssm中起什么作用？
	》spring：轻量级框架
	》作用：bean工厂，用来管理bean的生命周期和框架集成
	》两大核心：IOC/DI（控制反转/依赖注入）：把dao依赖注入到service层，service层反转给action层，spring顶层容器为BeanFactory
	》》AOP：面向切面编程
	
	2、Spring的事务？
	》编程式事务管理：式管理事务，极大灵活性，难维护。
	》声明式事务管理：可以将编程方业务代码和事务管理分离，用注解和xml配置来管理事务。
	
	3、IOC在项目中的作用？
	》作用：Ioc解决对象之间的依赖问题，把所有Bean的依赖关系通过配置文件或注解关联起来，降低了耦合度。
	
	4、Spring的配置文件中的内容？
	》开启事务注解驱动
	》事务管理器
	》开启注解功能，并配置扫描包。
	》配置数据库
	》配置SQL会话工厂，别名，映射文件
	》不用编写Dao层的实现类
	
	5、Spring下的注解？
		注册：@Controller @Service @Component @Repository（dao层）
		注入：@Autowired @Resource
		请求地址：@RequestMapping
		返回具体数据类型而非跳转：@ResponseBody
	
	6、SpringDI的三种方式
		构造器注入：通过构造方法初始化
			<constructor-arg index="0" type="java.lang.String" value="baoma" />
		setter方法注入：通过setter方法初始化
			<property name="id" value="baoma" />
		接口注入
	
	7、Spring主要使用了什么模式？
		前往-》所运用到的一些设计模式查看详情
		
		工厂模式：每个Bean的创建通过方法
		单例模式：默认的每个Bean的作用域都是单例
		代理模式：关于Aop的实现通过代理模式
	
	8、IOC/AOP的实现原理？
		IOC：通过反射机制生成对象注入
		AOP：动态代理
	
	
Spring AOP面试
	1、spring中配置的bean是在什么时候实例化的？
	》默认容器在加载的时候初始化bean，但是也可以通过设置lazy-init属性来延迟加载。
	
	2、描述一下spring中的ioc、aop和DI	
	》ioc和aop是spring的两大核心思想
	ioc（控制反转）：
	》利用反射的原理将对象创建的权利交给了spring容器，spring在运行的时候根据配置文件来动态的创建对象和维护对象
	》》之间的关系，实现了松耦合的思想；
	》应用：项目中的bean都可以交给spring容器来维护，这样bean的创建及销毁以及生命周期都由spring来处理；
	aop（面向切面编程）：
	》通过配置可以实现把业务逻辑和系统服务分离，业务逻辑只关心业务的处理而不再去处理其他事情；
	》应用：事务，日志，权限等。
	DI（依赖注入）：
	》由spring容器将对象注入到使用它的地方被注入的对象只提供对应的方法接收就行，由容器来决定对象之间的依赖关系
	》应用：例如service层需要调用dao层访问数据库，这时可以把dao层的bean给spring管理，我们只需要在service中定义
	》》对应的方法来接收spring管理的dao层bean
	
	4、spring如何配置声明式事务控制
	声明式事务管理有两种常用的方式：
	》基于tx和aop名字空间的xml配置文件
	》基于@Transaction注解
	配置方式：
	》配置事务管理器
	》事务的策略（这里可以配置事务的隔离级别，传播属性，是否可读等）
	》配置事务的切入点，注入事务属性
	注解方式：
	》配置事务管理器
	》开启事务控制的注解支持
	》在类或者方法上面添加@Transaction，事务的属性都在该注解的属性上设置
	
	5、spring的作用域有哪些
	》spring的作用域有singleton、prototype、request、session和global session
	》singleton 默认配置，一个实例
	》prototype 每次调用都会创建一个新的实例
	》request   每一个HTTP请求都有自己的bean实例，仅在基于web的spring applicationContext中可用
	》session   每个HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP Session有效
	》global session 在一个全局的HttpSession中，容器会返回该bean的同一个实例，仅在使用portletContext时有效

	6、spring AOP的底层原理是什么？拦截器的优势有哪些？
	》spring AOP的底层是通过代理来实现的
	》一种是基于JDK的动态代理
	》一种是基于CgLIB的动态代理
	拦截器的优势有哪些？
	》拦截器是基于java反射机制实现的，使用代理模式
	》拦截器不依赖于servlet容器
	》拦截器只能对action请求起作用
	》拦截器可以访问action上下文
	》拦截器可以获取IOC容器中的各个bean
	》在action生命周期中，拦截器可以被多次调用
	
	7、如何手写代码实现spring原理
	》spring是个巨大的工厂，这个工厂就是专门用来生成bean，所以如果要手写那就一定要用到工厂设计模式
	》写一个工厂类，对外提供一个静态方法，这个方法接收用户要创建对象的一个id，对象和id可以写到配置文件
	》》里面，工厂再提供一个init方法进行读取配置文件
	》用户调用的是根据传入id在配置文件中找到要创建的对象，最后通过反射创建对象并返回给用户
	
	8、Controller接收JSON数据使用哪个注解？
	》接收方法使用@RequestBody注解，发送时contentType要设置为application/json
	
	9、springMVC的工作原理
	》用户向服务器发送请求，DispatcherServlet捕获该请求
	》DispatcherServlet对请求URL进行解析，得到URI
	》根据URI，调用HandlerMapping获取Handler配置的所有相关对象，最后以HandlerExeutionChain对象的形式返回
	》DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter，提取Request中的模型数据。
	》》填充Handler入参，开始执行Controller
	》Controller执行完成后，选择一个适合的ViewResolver将返回对象ModelAndView返回给DispatcherServlet
	》》ViewResolver结合Model和View，来渲染视图，并将渲染结果返回给客户端
	
	10、对ssm的理解，他们是如何协作完成功能开发的？
	》ssm是标准MVC设计模式，将整个系统划分为显示层，控制层，业务层，数据层四层。
	》SpringMVC负责请求的转发和视图管理
	》》MyBatis负责数据库查询数据库
	》》Spring则是负责协调，实现业务对象管理即：负责不同层面的衔接
	
	11、SpringMVC中的常用注解及其作用
	》@RequestMapping 请求和方法映射
	》@RequestBody    接收客户端传入的JSON数据
	》@ResponceBody   返回客户端JSON数据	
	》@Controller     标识控制层
	》@Service        标识业务层
	》@Repository     标识数据层
	》@Component      把bean添加到Spring容器中
	》@Autowired      按照类型自动注入
	》@Resource       自定义注入，可以按照类型注入 也可以按照名字注入
	》@PathVariable   RESTful风格时使用
	》@Param		  表单参数和方法形参不一样时使用	
	
	
与EJB的区别：
	》借鉴https://www.cnblogs.com/strugglion/p/6027318.html
	》EJB
		最初的设计思想是为了分布式的应用服务的，分布式是正对大型应用构造的跨平台的协作计算，
		但现如今很多的应用不需要采用分布式的解决方案，因此用EJB显得臃肿。
	》目标都是为了松耦合POJO类提供中间件服务
	》EJB实现技术
		实现原理：就是把原来放到客户端实现的代码放到服务器端，并依靠RMI进行通信。
		是运行在独立服务器上的组件。客户端是通过网络对EJB对象进行调用的。在java中，能够实现远程
		对象调用的技术是RMI，而EJB技术的基础是RMI。通过RMI技术，J2EE将EJB组件创建为远程对象
		客户端就可以通过网络调用EJB对象了
	》EJB 服务集群
		RMI 是将各种任务与功能的类放到不同的服务器上
		通过各个服务器间建立的调用规则实现分布式的运算，即"服务群集"
	》瓶劲
		各个功能模块（服务器）都访问同一个数据库时，会造成数据库查询负载的问题
		然而每一个功能服务器都部署一个数据库，那么会面临着数据如何共享的问题
		网络面临压力大，广域网互联带宽低，
EJB的基础RMI：
	》Java远程方法调用，即Java RMI（Java Remote Method Invocation）
		RMI全部的宗旨就是尽可能简化远程接口对象的使用。
	》（Remote Procedure Call, RPC）可以用于一个进程调用另一个进程
		（很可能在另一个远程主机上）中的过程，从而提供了过程的分布能力。
		Java 的 RMI 则在 RPC 的基础上向前又迈进了一步，即提供分布式对象间的通讯。
	》RMI包含部分
		远程服务的接口定义
		远程服务接口的具体实现
		桩（Stub）和框架（Skeleton）文件
		一个运行远程服务的服务器
		一个RMI命名服务，它允许客户端去发现这个远程服务
		类文件的提供者（一个HTTP或者FTP服务器）
		一个需要这个远程服务的客户端程序
	》RMI的用途
		为分布式Java应用程序之间的远程通信提供服务，提供分布式服务。
		应用：Spring和EJB均封装了RMI技术
	》在Spring中实现RMI：
		在服务器端定义服务的接口，定义特定的类实现这些接口；
		在服务器端使用org.springframework.remoting.rmi.RmiServiceExporter类来注册服务；
		在客户端使用org.springframework.remoting.rmi.RmiProxyFactoryBean来实现远程服务的代理功能；
		在客户端定义访问与服务器端服务接口相同的类 
	
Spring AOP
	1、spring中配置的bean是在什么时候实例化的？
	》默认容器在加载的时候初始化bean，但是也可以通过设置lazy-init属性来延迟加载。
	
	2、描述一下spring中的ioc、aop和DI	
	》ioc和aop是spring的两大核心思想
	ioc（控制反转）：
	》利用反射的原理将对象创建的权利交给了spring容器，spring在运行的时候根据配置文件来动态的创建对象和维护对象
	》》之间的关系，实现了松耦合的思想；
	》应用：项目中的bean都可以交给spring容器来维护，这样bean的创建及销毁以及生命周期都由spring来处理；
	aop（面向切面编程）：
	》通过配置可以实现把业务逻辑和系统服务分离，业务逻辑只关心业务的处理而不再去处理其他事情；
	》应用：事务，日志，权限等。
	DI（依赖注入）：
	》由spring容器将对象注入到使用它的地方被注入的对象只提供对应的方法接收就行，由容器来决定对象之间的依赖关系
	》应用：例如service层需要调用dao层访问数据库，这时可以把dao层的bean给spring管理，我们只需要在service中定义
	》》对应的方法来接收spring管理的dao层bean
  
	5、spring的作用域有哪些
	》spring的作用域有singleton、prototype、request、session和global session和global session
	》singleton 默认配置，一个实例
	》prototype 每次调用都会创建一个新的实例
	》request   每一个HTTP请求都有自己的bean实例，仅在基于web的spring applicationContext中可用
	》session   每个HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP Session有效
	》global session 在一个全局的HttpSession中，容器会返回该bean的同一个实例，仅在使用portletContext时有效

	6、spring AOP的低层原理是什么？拦截器的优势有哪些？
	》spring AOP的低层是通过代理来实现的
	》一种是基于JDK的动态代理
	》一种是基于CgLIB的动态代理
	拦截器的优势有哪些？
	》拦截器是基于java反射机制实现的，使用代理模式
	》拦截器不依赖于servlet容器
	》拦截器只能对action请求起作用
	》拦截器可以访问action上下文
	》拦截器可以获取IOC容器中的各个bean
	》在action生命周期中，拦截器可以被多次调用
	
	7、如何手写代码实现spring原理
	》spring是个巨大的工厂，这个工厂就是专门用来生成bean，所以如果要手写那就一定要用到工厂设计模式
	》写一个工厂类，对外提供一个静态方法，这个方法接收用户要创建对象的一个id，对象和id可以写到配置文件
	》》里面，工厂再提供一个init方法进行读取配置文件
	》用户调用的是根据传入id在配置文件中找到要创建的对象，最后通过反射创建对象并返回给用户
	
	8、Controller接收JSON数据使用哪个注解？
	》接收方法使用@RequestBody注解，发送时contentType要设置为application/json
	
	9、springMVC的工作原理
	》用户向服务器发送请求，DispatcherServlet捕获该请求
	》DispatcherServlet对请求URL进行解析，得到URI
	》根据URI，调用HandlerMapping获取Handler配置的所有相关对象，最后以HandlerExeutionChain对象的形式返回
	》DispatcherServlet根据获得的Handler，选择一个合适的HandlerAdapter，提取Request中的模型数据。
	》》填充Handler入参，开始执行Controller
	》Controller执行完成后，选择一个适合的ViewResolver将返回对象ModelAndView返回给DispatcherServlet
	》》ViewResolver结合Model和View，来渲染视图，并将渲染结果返回给客户端
	
	10、对ssm的理解，他们是如何协作完成功能开发的？
	》ssm是标准MVC设计模式，将整个系统划分为显示层，控制层，业务层，数据层四层。
	》SpringMVC负责请求的转发和视图管理
	》》MyBatis负责数据库查询数据库
	》》Spring则是负责协调，实现业务对象管理即：负责不同层面的衔接
	
	11、SpringMVC中的常用注解及其作用
	》@RequestMapping 请求和方法映射
	》@RequestBody    接收客户端传入的JSON数据
	》@ResponceBody   返回客户端JSON数据	
	》@Controller     标识控制层
	》@Service        标识业务层
	》@Repository     标识数据层
	》@Component      把bean添加到Spring容器中
	》@Autowired      按照类型自动注入
	》@Resource       自定义注入，可以按照类型注入 也可以按照名字注入
	》@PathVariable   RESTful风格时使用
	》@Param		  表单参数和方法形参不一样时使用	  

面试题：
	Spring面试题
	1、spring在ssm中起什么作用？
	》spring：轻量级框架
	》作用：bean工厂，用来管理bean的生命周期和框架集成
	》两大核心：IOC/DI（控制反转/依赖注入）：把dao依赖注入到service层，service层反转给action层，spring顶层容器为BeanFactory
	》》AOP：面向切面编程
	
	2、Spring的事务？
	》编程式事务管理：编程方式管理事务，极大灵活性，难维护。
	》声明式事务管理：可以将业务代码和事务管理分离，用注解和xml配置来管理事务。
	
	3、IOC在项目中的作用？
	》作用：Ioc解决对象之间的依赖问题，把所有Bean的依赖关系通过配置文件或注解关联起来，降低了耦合度。
	
	4、Spring的配置文件中的内容？
	》开启事务注解驱动
	》事务管理器
	》开启注解功能，并配置扫描包。
	》配置数据库
	》配置SQL会话工厂，别名，映射文件
	》不用编写Dao层的实现类
	
	5、Spring下的注解？
	》注册：@Controller @Service @Component
	》注入：@Autowired @Resource
	》请求地址：@RequestMapping
	》返回具体数据类型而非跳转：@ResponseBody
	
	6、SpringDI的三种方式
	》构造器注入：通过构造方法初始化
	》》<constructor-arg index="0" type="java.lang.String" value="baoma" />
	》setter方法注入：通过setter方法初始化
	》》<property name="id" value="baoma" />
	》接口注入
	
	7、Spring主要使用了什么模式？
	》工厂模式：每个Bean的创建通过方法
	》单例模式：默认的每个Bean的作用域都是单例
	》代理模式：关于Aop的实现通过代理模式
	
	8、IOC/AOP的实现原理？
	》IOC：通过反射机制生成对象注入
	》AOP：动态代理
	
SpringMVC面试题
		1、SpringMVC的控制器是不是单例模式，如果是；有什么问题，怎么解决？
		》问题： SpringMVC的控制器是不是单例模式，如果是，有什么问题，怎么解决？
		》解决：是单例模式，所以在多线程访问的时候有线程安全问题，不要用同步，会影响性能，
		》解决方案是在控制器里面不能写字段。
		
		2、SpringMVC中控制器的注解？
		》@Controller：该注解表明该类扮演控制器的角色
		
		3、@RequestMapping 注解用在类上的作用？
		》作用：用来映射一个URL到一个类或者一个特定的处理方法上
		
		4、前台多个参数，这些参数都是一个对象，快速得到对象？
		》方法：直接在方法中声明这个对象，SpringMVC就自动把属性赋值到这个对象里面
		
		5、SpringMVC中函数的返回值？
		》String、ModelAndView，List，Set等
		》一般String，Ajax请求，返回一个list集合
		
		6、SpringMVC中的转发和重定向？
		
		7、SpringMVC和Ajax之间的相互调用？
		》通过JackSon框架把java里面对象直接转换成js可识别的json对象，具体步骤如下：
		》加入jackSon.jar
		》在配置文件中配置json的映射
		》在接收Ajax方法里面直接返回Object，list等，方法前面需要加上注解@ResonanceBody
		
		8、SpringMVC工作流程图？
		》图片见当前目录（springmvc工作流程.png）
		
		9、Struts2和SpringMVC的区别？
		》入口不同：
		》Struts2：filter过滤器
		》SpringMVC：一个Servlet即前端控制器
		》开发方式不同：
		》Struts2：基于类开发，传递参数通过类的属性，只能设置为多例
		》SpringMVC：基于方法开发（一个url对应一个方法），请求参数传递到方法形参，可以为单例也可以多例
		》请求方法不同：
		》Struts2：值栈存储请求和响应的数据，通过OGNL存取数据
		》SpringMVC：通过参数解析器将request请求内容解析，给方法形参复制，将数据和视图封装成ModelAndView对象，
		》》最后又将ModelAndView中的模型数据通过request域传输到页面，jsp视图解析器默认使用的是jstl。
		
MyBatis面试题
		1、Ibatis和Mybatis？
		》Ibatis：2010年，apache的Ibatis框架停止更新，并移交给了google团队，同时更名为MyBatis。
		》MyBatis：Ibatis的升级版本
		
		2、什么是Mybatis的接口绑定，有什么好处？
		》Mybatis实现了DAO接口与xml映射文件的绑定，自动为我们生成接口的具体实现，使用起来变得更加省事和方便。
		
		3、什么情况注解，什么情况用xml绑定？
		》注解使用：SQL语句简单时
		》xml绑定使用情况：xml绑定（@RequestMap用来绑定xml文件）
		
		4、MyBatis的核心处理类叫什么
		》SqlSession
		
		5、查询表名和返回实体Bean对象不一致，如何处理？
		》映射键值对即可
		》<result column="title" property="title" javaType="java.lang.String" />
		》column：数据库中表的列名
		》property：实体Bean中的属性名
		
		6、MyBatis的好处？
		》把Sql语句从java中独立出来
		》封装了底层的JDBC，API的调用，并且能够将结果集自动转换成JavaBean对象，简化了java数据库编程的重复工作
		》自己编写Sql语句，更加的灵活
		》入参无需用对象封装，使用@param注解
		
		7、MyBatis配置一对多？
		》<collection property="topicComment" column="id" ofType="com.tmf.bbs.pojo.Comment" select="selectComment" />
		》property：属性名
		》column：共同列
		》ofType：集合中元素的类型
		》select：要连接的查询
		
		8、MyBatis配置一对一？
		》<association property="topicType" select="selectType" column="topics_type_id" javaType="com.tmf.bbs.pojo.Type" />
		》property：属性名
		》select：要连接的查询
		》column：共同列
		》javaType：集合中元素类型
		
		9、${} 和 #{}的区别？
		》${}：简单字符串替换，把${}直接替换成变量的值，不做任何转换，这种是取值以后再去编译SQL语句
		》#{}: 预编译处理，sql中的#{}替换成？补全预编译语句，有效的防止Sql语句注入，这种取值是编译好SQL语句再取值
		
		10、获取上一次自动生成的主键值？
		》select last _insert_id()
		
		11、MyBatis如何分页，分页原理？
		》RowBounds对象分页
		》在Sql内直接书写，带有物理分页
		
		12、MyBatis工作原理？
		》图片请看当前目录（MyBAtis工作原理.jpg）
		》原理：
		》通过SqlSessionFactoryBuilder从mybatis-Config.xml配置文件中构建出SqlSessionFactory。
		》SqlSessionFactory开启一个SqlSession，通过SqlSession实例获得Mapper对象并且运行Mapper映射的Sql语句
		》完成数据库的CRUD操作和事务提交，关闭SqlSession
	
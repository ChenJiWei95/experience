
目录：
	是什么
	为什么要使用
	核心配置文件
	核心注解
	springboot的核心功能
	特性
	程序监控的应用
	Spring Boot中的 Starters
	配置加载顺序
	springboot的缺点
	多套不同环境配置
	面试题

是什么
	Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，是spring的一个脚手架
	主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。
	简化了spring应用的创建、运行、部署。
	创建：习惯优于配置，简省了繁重的配置以及提供了各种启动器，达到快速创建的作用
	运行：内嵌servlet容器，通过一个注解springbootapplication注解的类其中的main函数即可运行项目
	部署：内嵌servlet容器，打包成jar即可通过命令启动，减少对运行环境的依赖，以及监控应用
	
为什么要使用
	独立运行
	简化配置
	自动配置
	无代码生成和XML配置
	应用监控
	上手容易
	
核心配置文件：
	application 
		用于 Spring Boot 项目的自动化配置
		有.properties和.yml 两种格式
		.properties 编写方式		
			app.user.name = javastack
		.yml 编写方式
			app:
			  user:
				name: javastack
	bootstrap 
		应用场景：
			使用 Spring Cloud Config 配置中心时，这时需要在 bootstrap 配置文件中添加连接到配置中心的配置属性来加载外部配置中心的配置信息；
			一些固定的不能被覆盖的属性；
			一些加密/解密的场景；
		
		在spring boot中此配置文件的角色：
			由于Spring Cloud 构建于 Spring Boot 之上，
			在 Spring Boot 中有两种上下文，一种是 bootstrap, 另外一种是 application, 
			而bootstrap 是应用程序的父上下文，即 bootstrap 加载优先于 applicaton。
		
		bootstrap用途：
			主要用于从额外的资源来加载配置信息，还可以在本地外部配置文件中解密属性。
		
		特性：
			boostrap 由父 ApplicationContext 加载，比 applicaton 优先加载
			boostrap 里面的属性不能被覆盖
		
核心注解
	@SpringBootApplication
		入口类
		组合了：
			@SpringBootConfiguration
			@EnableAutoConfiguration
			@ComponentScan
	@SpringBootConfiguration
		组合了 @Configuration 注解，实现配置文件的功能。
	@EnableAutoConfiguration
		该注解表示“开启自动配置”。也可以关闭某个自动配置的选项，
		如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。
	
		组合注解有：
			@Target(ElementType.TYPE)
			@Retention(RetentionPolicy.RUNTIME)
			@Documented
			@Inherited
			@AutoConfigurationPackage
			@Import(AutoConfigurationImportSelector.class) 
				
	@ComponentScan
		Spring组件扫描。
		扫描包路径下面的所有@Controller、@Service、@Repository、@Component 的类
		在Spring Boot中默认扫描@SpringBootApplication所在类的同级目录以及子目录下的相关注解

springboot的核心功能
	1、独立运行spring项目。springboot可以以jar包的形式进行独立运行，使用java -jar xx.jar 就可以成功运行项目。
	2、内嵌servlet容器。内嵌容器，使得我们可以执行运行项目的主程序main函数，使得项目可以快速运行。
	3、提供starter简化Maven配置。springboot提供了一系列的start pol用来简化maven依赖。如：常用的spring-boot-starter-web、spring-boot-starter-tomcat、spring-boot-starter-actuator等
	4、自动配置spring。springboot会根据我们项目中类路径的jar包，为jar包的类进行自动装配bean。
	5、应用监控。springboot提供了基于HTTP、ssh、telnet对运行时的项目进行监控。
	springboot提供了actuator组件，只需要在配置中加入spring-boot-starter-actuator依赖，通过继承AbstractHealthIndicator这个抽象类，然后在doHealthCheck()方法中检测服务健康的方法，就可以实现一个简单的监控。

特性
	内嵌Servlet Container
		通过配置启动器可以内嵌tomcat容器以及Jetty容器
		打包成jar文件，通过命令java -jar 即可运行
		减少了对环境的依赖
	遵循习惯优于配置的原则。使用springboot我们只需要很少的配置，大多数使用默认配置即可 
	可以完全不使用xml配置，只需要自动配置和Java config
	提供了starter POM，能够非常方便的进行包管理
	生产准备特性
		springboot提供的actuator插件提供了大量的生产级特性，可以帮助监控和管理
		//springBoot应用，比如健康检查、审计、统计和HTTP追踪。这在微服务中，可以通过actutor提供的端点与外部应用监控系统进行整合
		
springboot的缺点
	1、高度集成，使用的时候不知道底层实现
	2、由于不了解底层，导致项目出了问题会很难排查
	
程序监控的应用
	引用：https://blog.csdn.net/wangshuaiwsws95/article/details/80163036

	Actuator插件
		健康检查、统计和HTTP追踪
	Admin监控系统

Spring Boot中的 Starters
	spring-boot-starter-
	Starters可以理解为启动器，它包含了一系列可以集成到应用里面的依赖包，通过启动器我们可以一站式集成 Spring 及其他技术，
	而不需要到处找示例代码和依赖包。如你想使用 Spring JPA 访问数据库，
	只要加入 spring-boot-starter-data-jpa 启动器依赖就能使用了。
	Starters包含了许多项目中需要用到的依赖，它们能快速持续的运行，都是一系列得到支持的管理传递性依赖。

配置加载顺序
	1）properties文件；
	2）YAML文件；
	3）系统环境变量；
	4）命令行参数；

多套不同环境配置
	applcation.properties
	application-dev.properties
	application-test.properties
	application-prod.properties

面试题：
	springboot是如何进行自动装配的
		@EnableAutoConfiguration意思是开启自动配置，其组合注解中有一个注解@Import，
		Import注解其导入的AutoConfigurationImportSelector的selectImports()方法
		通过SpringFactoriesLoader.loadFactoryNames()扫描所有具有META-INF/spring.factories的jar包。
		spring-boot-autoconfigure-x.x.x.x.jar里就有一个这样的spring.factories文件。
	
	引用:https://blog.csdn.net/weixin_45136046/article/details/90768687
	Spring Boot、Spring MVC 和 Spring 有什么区别
		SpringFramework
			根据IOC和DI进行说明
			最重要的特征是依赖注入。所有 SpringModules 不是依赖注入就是 IOC 控制反转。
			实现了对业务对象的管理，使得开发出松耦合的应用
		SpringMVC
			DispatcherServelet、MoudlAndView、ViewResolver 
			通过以上对请求的转发视图的管理
		SpringBoot
			前两个开发需要配置大量的参数
			Spring Boot 通过一个自动配置和启动的项来目解决这个问题。
			为了更快的构建产品就绪应用程序，Spring Boot 提供了一些非功能性特征。

	什么是 Spring Boot Stater	
		 
	
	你能否举一个例子来解释更多 Staters 的内容？
	开发一个web应用最需要哪个start？
		支持全栈式Web开发，包括 Tomcat和 springmvc
		spring-boot-starter-web
		此依赖项包含：
			Spring - core，beans，context，aop
			Web MVC - （Spring MVC）
			Jackson - for JSON Binding
			Validation - Hibernate,Validation API
				相关知识点：https://www.jianshu.com/p/0bfe2318814f
			Enbedded Servlet Container - Tomcat
			Logging - logback,slf4j
		Spring Boot Starter Web 预先打包了这些依赖项。
	
	Spring Boot 还提供了其它的哪些 Starter Project Options？
		Spring Boot 也提供了其它的启动器项目包括，包括用于开发特定类型应用程序的典型依赖项 
		spring-boot-starter-web - Web 和 RESTful 应用程序
		spring-boot-starter-test - 单元测试和集成测试
		spring-boot-starter-jdbc - 传统的 JDBC 
		spring-boot-starter-security - 使用 SpringSecurity 进行身份验证和授权
		spring-boot-starter-data-jpa - 带有 Hibeernate 的 Spring Data JPA
		//spring-boot-starter-web-services - SOAP Web Services
		//spring-boot-starter-hateoas - 为服务添加 HATEOAS 功能
		//spring-boot-starter-data-rest - 使用 Spring Data REST 公布简单的 REST 服务
		
	Spring 是如何快速创建产品就绪应用程序的？
		Spring Boot 致力于快速产品就绪应用程序。为此，它提供了一些譬如高速缓存，日志记录，
		 监控和嵌入式服务器等开箱即用的非功能性特征。
		spring-boot-starter-actuator - 使用一些如监控和跟踪应用的高级功能
		spring-boot-starter-undertow, spring-boot-starter-jetty, spring-boot-starter-tomcat - 
		 选择您的特定嵌入式 Servlet 容器
		spring-boot-starter-logging - 使用 logback 进行日志记录
		spring-boot-starter-cache - 启用 Spring Framework 的缓存支持
	
	Spring Boot 2.0 需要 Java8 或者更新的版本。Java6 和 Java7 已经不再支持。
	
	eclipse
		在 Eclipse 中，使用文件 - 新建 Maven 项目来创建一个新项目
		添加依赖项。
		添加 maven 插件。
		添加 Spring Boot 应用程序类。
	省略一些
	
	引用：https://blog.csdn.net/weixin_34367257/article/details/89618361?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.edu_weight
	Spring Boot 需要独立的容器运行吗？
		可以不需要，内置了 Tomcat/ Jetty 等容器。
		
	你如何理解 Spring Boot 中的 Starters？
		
	省略一些
	


======================================================================================================	
目录： 
	》简介
	》依赖模块
	》下载和安装maven
	》eclipse继承maven
	》创建maven项目
	》整合springMVC之后的注解的使用 简单记录
	》核心注解
	》自动配置原理
	》整合Thymeleaf
	》application.yml文件
	》实践
	》遇到的问题
	
简介：
	》目的就是为了java web的开发进行简化和快速 简化开发过程中引入
	》》或启动相关spring功能的配置
	》编码简单（注解）、配置简单（自动配置 快速构建项目 快速集成新技术）
	》》部署简单（内嵌tomcat jetty容器）、监控简单（自带项目监控）

依赖模块：
	》spring-boot-starter自动配置依赖模块，都约定spring-boot-starter-作为命名的前缀。
	》》groupId都是org.springframework.boot
	》》日志依赖模块：spring-boot-starter-logging
	
	》》web开发依赖模块：spring-boot-starter-web 
	》》》此时项目中的静态文件和页面统一放在src/main/resources下
	》》》src/main/resources/static存放 css、js和image
	》》》src/main/resources/templates存放 html和jsp
	》spring- boot-starter-activemq:为JMs使用 Apache ActiveMQ. ActiveMQ是 Apache出
	》》文件的支持。
	》spring-boot-starter-amqp:通过 spring-rabbit来支持AMQP协议( Advanced Message
	》》品的最流行、能力强劲的开源消息总线
	》spring-boot-starter-aop:支持面向切面的编程(AOP)，包括 spning-aop和 Aspect
	》spring-boot-starter-artemis:通过 Apache Artemis支持Ms的APl( Java Message Service
	》》( Java Message Service API)。
	》spring-boot-starter-batch:支持 Spring Batch,包括 HSQLDB数据库
	》spring-boot-starter-cache:支持 Spring的 Cache抽象
	》spring-boot-starter-cloud-connectors:支持 Spring Cloud Connectors,简化了在像 Cloud
	》》Foundry或 Heroku这样的云平台上的连接服务。
	》spring-boot-starter-data-cassandra:使用 Cassandra分布式数据库、 Spring Data Cassandra.
	》》Apache Cassandra是一套开源分布式 NoSQL数据库系统
	》spring-boot-starter-data-couchbase:使用 Couchbase文件存储数据库、 Spring.Data
	》》Couchbase. Spring Data是一个用于简化数据库访问并支持云服务的开源框架
	》spring-boot-starter-data-elasticsearch:支持 ElasticSearch搜索和分析引擎，包括
	》》spring-data-elasticsearch
	》spring-boot-starter-data-gemfire支持 GemFire分布式数据存储，包括 spring-data-gespring-boot-starter-data-JF支持 JPA ( Java Persistence API)，包括 spring-data-jpa
	》》spring-om和 Hibernate
	》spring-boot-starter-data-Idap:支持 Spring Data LDAP
	》spring-boot-starter-data-mongodb:支持 MongoDB数据库，包括 spring-data-mongodbspring-boot-starter-data-ne4:使用Ne4图形数据库、 Spring Data Nec小，Neo0是
	》》个高性能的 NoSQL图形数据库，它将结构化数据存储在网络上而不是表中
	》spring-boot-starter; redis:支持 Redis键值存储数据库，包括 spring-redis
	》spring-boot-starter-data-rest通u过 spring-data-rest-webmve,支持通过REsT暴露 Spring
	》》Data数据仓库。
	》spring-boot-starter-data-solr：。支持 Apache Solr搜索平台，包括 spring-data-soI
	》spring- boot-starter- freemarker:支持 FreeMarker模板引擎
	》spring-boot-starter-groovy-templates:支持 Groovy模板引擎。
	》spning- boot-starter-hateoas:通过 spring-hateoas支持基于 
	》》HATEOAS的 RESTful Web服务
	》spring-boot-starter-integration:支持通用的 spring-integration模块。
	》spring-boot-starter-jdbc:支持JDBC数据库。
	》spring-boot-starter-jersey:支持 Jersey RESTful Web服务框架。
	》spring-boot-starter-honet:通过 Hornet支持JMs
	》spring-boot-starter-jta-atomikos:通过 Atomikos支持JA分布式事务处理
	》spring-boot-starter-jta-bitronix:通过 Bitronix支持JTA分布式事务处理。
	》spring-boot-starter-mail:支持 javax.mail模块。
	》spring-boot-starter-mobile:支持 spring-mobile
	》spring-boot-starter-mustache:支持 Mustache模板引擎。
	》spring-boot-starter-security: xiF spring-securityo
	》spring-boot-starter-social-facebook: xi spring-social-facebook
	》spring-boot-starter-social-linkedin: xN spring-social-linkedin
	》spring-boot-starter-social-twitter: xi spring-social-twitter
	》spring-boot-starter-est:支持常规的测试依赖，包括JUni、 Hamcrest、 Mockito以
	》》spring-test模块。
	》spring- boot-starter-thymeleaf:支持 Thymeleaf模板引擎，包括与 Spring的集成。
	》spring-boo-starter-velocity:支持 Velocity模板引擎。
	》spring-boot-starter-web:支持全栈式Web开发，包括 Tomcat和 spring-webmve
	》spring-boot-starter- websocket:支持 WebSocket开发。
	》spring-boot-starter-ws: xi Spring Web Services
	
	》spring的配置（这里只指明两种）：默认配置文件名aplication.properties
	》》放在src/main/resources或者类路径的/config
	》》另一种 application.yaml

	
下载和安装maven：
	》http://maven.apache.org/download.cgi
	》解压后：
	》》bin目录：保存可执行文件 mvn.bat
	》》boot：类加载器框架与java 的类加载器相比，提供了更丰富的的语法。maven使用该加载器加载自己的类库
	》》conf：配置文件目录。setting.xml设置maven全局行为
	》》lib：运行时所需的类库
	
eclipse集成maven：
	》操作：Window->preferences->maven->user settings
	》global settings和user settings配置上maven的conf目录下的settings.xml
	》local repository：maven本地资源 默认是user/m2。依赖包都会下到此处
	
创建maven项目：	
	》file -> new -> others -> maven -> meven project
	》接下来的界面说明：
	》》create a simple project 创建一个简单的项目（跳过原型选择 - 建议不要勾选
	》》use default workspce location 使用默认的工作区间
	》》add project to working set 添加项目工作集，选中则将新建的项目放入工作集
	》》》工作集则为项目归类，方便区分 可不选
	》》最后点击next
	》接下来的界面说明：
	》》选择项目类型：
	》》选择maven...quickstart 1.1
	》接下来的界面说明：
	》》填写项目参数：
	》》group Id  项目唯一标识
	》》Artifact id 项目名称
	》》version 版本
	》》package 默认包结构
	》》最后按finish则创建完成
	
	》maven项目结构
	-src
		-main 项目主体
			-java 源代码
			-resource 所需资源目录
				-static
				-templates
			-config 配置文件根目录
			-webapp 
			...
		-test 项目测试目录
			-java 源代码
			同上
	-target 输出目录根 
		-classes 项目主体输出目录 编译后class文件存放的地方
		
	》使用的jdk版本
	》》默认是1.5
	》》可以修改settings.xml 更改需要默认版本 
	》》》具体修改如下：
	<profile>
      <id>jdk-1.8</id>

      <activation>
		<activeByDefault>true</activeByDefault>
        <jdk>1.8</jdk>
      </activation>

      <properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
	  </properties>
    </profile>
	
	》pom.xml 是maven的基础配置也成为项目对象模型描述文件。
	》》<groupId>
	》》<artifactId>
	》》<version> 
	》》<packaging>   打包之后的格式 war 、jar
	》》<parent>
	》》》<groupId>org.springframework.boot</groupId>
	》》》<artifactId>spring-boot-starter-parent</artifactId>
	》》》<version>1.5.8.RELEASE</version>
	》》》<relativePath />
	》》<properties> 定义全局属性

整合springMVC之后的注解的使用：
	》@RestControl
	》》此注解是一个组合注解
	》》相当于springMVC中的@Control+@ResponseBody
	》@SpringBootApplication
	》》指定这是一个springboot程序
	》》此注解是一个组合注解
	》》相当于@SpringConfiguration+@EnableAutoConfiguration+@ComponentScan
	》》SpringApplication.run(App.class, args);  从main方法 启动spring应用类

核心注解：
	》@SpringBootApplication 标注入口类注解，
	》》main方法中SpringApplication.run(App.class, args);可以直接启动springboot
	》组合了以下注解：
	》》@SpringConfiguration spring boot的配置注解
	》》@EnableAutoConfiguration 启动自动配置，
	》》@ComponentScan 扫描配置
	》关闭某个自动配置：
	》》@SpringBootApplication(exclude={RedisAutoConfiguration.class}) 不自动配置redis
自动配置原理：
	》在进行SpringApplication对象实例化会加载MATA-INF/spring.factories文件
	》》将该配置文件中的配置载入Spring容器进行自动配置
	
	》源码分析：
	》》首先启动SpringApplication.run(App.class, args)
	》》org/springframework/boot/Spring Application.java
	public static ConfigurableApplicationContext run (Object[] sources, String[] args){
		return new SpringApplication (sources).run (args);
	}
	可以看到rn方法实际上在创建 SpringApplication对象实例，如下
	》》org/ springframework/boot/SpringApplication. java
	public SpringApplication (Object... sources){
		initialize(sources);
	}
	调用了initialize方法，如下
	》》org/ springframework/boot/SpringApplication.java
	private void initialize(Object[] sources){
		if(sources != null && sources.length >0){
			this sources.addAll(Arrays.asList(sources));
		}
		this.webEnvironment = deduceWebEnvironment ();
		setInitializers((Collection) getspringFactoriesInstances(
			AplicationcontextInitializer. class));
		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
		this.mainApplicationClass = deduceMainApplicationclass();
	}
	initialize方法中调用getSpringFactoriesInstances方法，如下
	》》org/ springframework/boot/SpringApplication.java
	private <T> Collection<? extends T> getSpringFactoriesInstances (Class<T> type
		, Classs<?>[] parameterTypes, Object... args){
		ClassLoader classLoader= Thread.currentThread().getContextclassLoader();	
		// Use names and ensure unique to protect against duplicates
		Set<string> names = new LinkedHashSet<string>(
			SpringFactoriesLoader.loadFactoryNames(type, classLoader));
		List<T> instances= createSpringFactoriesInstances(type, parameterTypes,
			classLoader, args, names);
		AnnotationAwareOrdercomparator.sort(instances);
		return Instances;
	}
	上面代码调用了loadFactoryNames方法，如下：
	》》org/ springframework/boot/SpringApplication.java
	public static List<string> loadFactoryNames(Class<？> factoryclass, ClassLoader 
		classLoader){
		string factoryclassName = factoryClass.getName();
		try{
			Enumeration<URL> urls = 
				(classLoader != null 
				? classLoader.getResources(FACTORIES_RESOURCE_LOCATION)
				: ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));
			List<string> result = new ArrayList<string>();
			while(urls. hasMoreElements()){
				URL url= urls.nextElement();
				Properties properties = PropertiesLoaderUtils.loadProperties(new
					UrlResource(url));
				String factoryclassNames = properties.getProperty(factoryclassName);
				result.addAll(Arrays.asList(StringUtils.commaDelimitedListTostringArray
					(factoryclassNames)));
			}
			return result;
		}catch(IOException e){
		
		}
	}
	在上述源码中可以看到加载了一个常量：FACTORIES_RESOURCE_LOCATION
	public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";
	所以最终spring boot是通过加载META-INF/spring.factories文件进行自动配置的 
	
	》spring.factories分析：
	》》该文件非常重要，用来指导spring boot找到指定的自动配置文件
	》》分析如下：
	》》》PropertySource Loaders
	org.springframework.boot.env.PropertySourceLoader=
	\org.springframework.boot.env.PropertiesPropertySourceLoader,
	\org.springframework.boot.env.YamlPropertySourceLoader
	》》》Run Listeners
	org.springframework.boot.SpringApplicationRunListener=
	\org.springframework.boot.context.event.EventPublishRunListener
	配置了运行监听器类，默认会加载EventPublishRunListener
	》》》Application Context Initializers
	org.springframework.context.ApplicationContextInitializer=
	\org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,
	\org.springframework.boot.context.ContextIdApplicationContextInitializer,
	\org.springframework.boot.context.config.DelegationgApplicationContextInitializer,
	\org.springframework.boot.context.embedded.ServerPortInfoApplicationContextInitializer
	以上配置默认加载四个ApplicationContextInitializer类
	ConfigurationWarningsApplicationContextInitializer 报告常见的错误
	ContextIdApplicationContextInitializer 给ApplicationContext 设置一个ID
	DelegationgApplicationContextInitializer 将初始化的工作委托给context.initializer.classes环境变量指定的初始化器
	ServerPortInfoApplicationContextInitializer 
	》》》监听的配置：
	context容器完成refresh方法时 清除缓存信息
	容器关闭时发出通知，如果父容器关闭那么子容器也关闭
	》》》等其他关于spring.factories的配置，这里省略介绍
	
	
整合Thymeleaf：
	配置：
		默认：
			prefix：classpath:/templates/
			suffix：.html
			...
		自定义：（在application.property中添加）
			spring.thymeleaf.prefix				
			spring.thymeleaf.suffix
			spring.thymeleaf.mode			模板模式 HTML
			spring.thymeleaf.encoding		模板编码
			spring.thymeleaf.content-type	模板类型 text/html
			spring.thymeleaf.cache			模板缓存
	依赖模块：
		spring-boot-starter-thymeleaf

application.yml文件：

#server.port=8080

#mybatis.config-locations=classpath:mybatis/conf.xml
#mybatis.mapper-locations=classpath:mybatis/mapping/*.xml
#mybatis.type-aliases-package=com.svse.entity

#server.tomcat.uri-encoding=utf-8

#spring.datasource.url=jdbc:mysql://120.79.149.233:3306/shop
#spring.datasource.username=chenjiwei
#spring.datasource.password=cjw168999
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.cache=false
#spring.thymeleaf.mode=LEGACYHTML5

server:
  port: 8080
spring:
  datasource:
    username: chenjiwei
    password: cjw168999
    url: jdbc:mysql://120.79.149.233:3306/shop
    driver-class-name: com.mysql.jdbc.Driver
    hikari:
      idle-timeout: 60000
      maximum-pool-size: 30
      minimum-idle: 10
logging:
  level:
    com.chen: debug
// 上传的配置
servlet:
  multipart:
    max-file-size: 10MB
    max-request-size: 10MB
// thymeleaf的设置
#thymeleaf:
#  mode: HTML5
#  encoding: UTF-8
#  servlet:
#    content-type: text/html

实践：
	》https://blog.csdn.net/pbl_create/article/details/88091866 零基础搭建springboot
	》@RequestMapping("/hello") 映射mapping
	》》访问方式： http://localhost:8080/hello
	》》添加新的映射要重启项目，修改字符串无需重启
	

	
遇到的问题：
	》web.xml is missing and <failOnMissingWebXml> is set to true
	》SpringBoot启动报错Failed to determine a suitable driver class
	》》将mybatis依赖注释掉 当前项目用的是hibernate 如需使用，需配置batis相关的配置在application中
	

目录： 
	》简介
	》依赖模块
	》下载和安装maven
	》eclipse继承maven
	》创建maven项目
	》整合springMVC之后的注解的使用 简单记录
	》核心注解
	》自动配置原理
	》整合Thymeleaf
	》application.yml文件
	》实践
	》遇到的问题
	
简介：
	》目的就是为了java web的开发进行简化和快速 简化开发过程中引入
	》》或启动相关spring功能的配置
	》编码简单（注解）、配置简单（自动配置 快速构建项目 快速集成新技术）
	》》部署简单（内嵌tomcat jetty容器）、监控简单（自带项目监控）

依赖模块：
	》spring-boot-starter自动配置依赖模块，都约定spring-boot-starter-作为命名的前缀。
	》》groupId都是org.springframework.boot
	》》日志依赖模块：spring-boot-starter-logging
	
	》》web开发依赖模块：spring-boot-starter-web 
	》》》此时项目中的静态文件和页面统一放在src/main/resources下
	》》》src/main/resources/static存放 css、js和image
	》》》src/main/resources/templates存放 html和jsp
	》spring- boot-starter-activemq:为JMs使用 Apache ActiveMQ. ActiveMQ是 Apache出
	》》文件的支持。
	》spring-boot-starter-amqp:通过 spring-rabbit来支持AMQP协议( Advanced Message
	》》品的最流行、能力强劲的开源消息总线
	》spring-boot-starter-aop:支持面向切面的编程(AOP)，包括 spning-aop和 Aspect
	》spring-boot-starter-artemis:通过 Apache Artemis支持Ms的APl( Java Message Service
	》》( Java Message Service API)。
	》spring-boot-starter-batch:支持 Spring Batch,包括 HSQLDB数据库
	》spring-boot-starter-cache:支持 Spring的 Cache抽象
	》spring-boot-starter-cloud-connectors:支持 Spring Cloud Connectors,简化了在像 Cloud
	》》Foundry或 Heroku这样的云平台上的连接服务。
	》spring-boot-starter-data-cassandra:使用 Cassandra分布式数据库、 Spring Data Cassandra.
	》》Apache Cassandra是一套开源分布式 NoSQL数据库系统
	》spring-boot-starter-data-couchbase:使用 Couchbase文件存储数据库、 Spring.Data
	》》Couchbase. Spring Data是一个用于简化数据库访问并支持云服务的开源框架
	》spring-boot-starter-data-elasticsearch:支持 ElasticSearch搜索和分析引擎，包括
	》》spring-data-elasticsearch
	》spring-boot-starter-data-gemfire支持 GemFire分布式数据存储，包括 spring-data-gespring-boot-starter-data-JF支持 JPA ( Java Persistence API)，包括 spring-data-jpa
	》》spring-om和 Hibernate
	》spring-boot-starter-data-Idap:支持 Spring Data LDAP
	》spring-boot-starter-data-mongodb:支持 MongoDB数据库，包括 spring-data-mongodbspring-boot-starter-data-ne4:使用Ne4图形数据库、 Spring Data Nec小，Neo0是
	》》个高性能的 NoSQL图形数据库，它将结构化数据存储在网络上而不是表中
	》spring-boot-starter; redis:支持 Redis键值存储数据库，包括 spring-redis
	》spring-boot-starter-data-rest通u过 spring-data-rest-webmve,支持通过REsT暴露 Spring
	》》Data数据仓库。
	》spring-boot-starter-data-solr：。支持 Apache Solr搜索平台，包括 spring-data-soI
	》spring- boot-starter- freemarker:支持 FreeMarker模板引擎
	》spring-boot-starter-groovy-templates:支持 Groovy模板引擎。
	》spning- boot-starter-hateoas:通过 spring-hateoas支持基于 
	》》HATEOAS的 RESTful Web服务
	》spring-boot-starter-integration:支持通用的 spring-integration模块。
	》spring-boot-starter-jdbc:支持JDBC数据库。
	》spring-boot-starter-jersey:支持 Jersey RESTful Web服务框架。
	》spring-boot-starter-honet:通过 Hornet支持JMs
	》spring-boot-starter-jta-atomikos:通过 Atomikos支持JA分布式事务处理
	》spring-boot-starter-jta-bitronix:通过 Bitronix支持JTA分布式事务处理。
	》spring-boot-starter-mail:支持 javax.mail模块。
	》spring-boot-starter-mobile:支持 spring-mobile
	》spring-boot-starter-mustache:支持 Mustache模板引擎。
	》spring-boot-starter-security: xiF spring-securityo
	》spring-boot-starter-social-facebook: xi spring-social-facebook
	》spring-boot-starter-social-linkedin: xN spring-social-linkedin
	》spring-boot-starter-social-twitter: xi spring-social-twitter
	》spring-boot-starter-est:支持常规的测试依赖，包括JUni、 Hamcrest、 Mockito以
	》》spring-test模块。
	》spring- boot-starter-thymeleaf:支持 Thymeleaf模板引擎，包括与 Spring的集成。
	》spring-boo-starter-velocity:支持 Velocity模板引擎。
	》spring-boot-starter-web:支持全栈式Web开发，包括 Tomcat和 spring-webmve
	》spring-boot-starter- websocket:支持 WebSocket开发。
	》spring-boot-starter-ws: xi Spring Web Services
	
	》spring的配置（这里只指明两种）：默认配置文件名aplication.properties
	》》放在src/main/resources或者类路径的/config
	》》另一种 application.yaml

	
下载和安装maven：
	》http://maven.apache.org/download.cgi
	》解压后：
	》》bin目录：保存可执行文件 mvn.bat
	》》boot：类加载器框架与java 的类加载器相比，提供了更丰富的的语法。maven使用该加载器加载自己的类库
	》》conf：配置文件目录。setting.xml设置maven全局行为
	》》lib：运行时所需的类库
	
eclipse集成maven：
	》操作：Window->preferences->maven->user settings
	》global settings和user settings配置上maven的conf目录下的settings.xml
	》local repository：maven本地资源 默认是user/m2。依赖包都会下到此处
	
创建maven项目：	
	》file -> new -> others -> maven -> meven project
	》接下来的界面说明：
	》》create a simple project 创建一个简单的项目（跳过原型选择 - 建议不要勾选
	》》use default workspce location 使用默认的工作区间
	》》add project to working set 添加项目工作集，选中则将新建的项目放入工作集
	》》》工作集则为项目归类，方便区分 可不选
	》》最后点击next
	》接下来的界面说明：
	》》选择项目类型：
	》》选择maven...quickstart 1.1
	》接下来的界面说明：
	》》填写项目参数：
	》》group Id  项目唯一标识
	》》Artifact id 项目名称
	》》version 版本
	》》package 默认包结构
	》》最后按finish则创建完成
	
	》maven项目结构
	-src
		-main 项目主体
			-java 源代码
			-resource 所需资源目录
				-static
				-templates
			-config 配置文件根目录
			-webapp 
			...
		-test 项目测试目录
			-java 源代码
			同上
	-target 输出目录根 
		-classes 项目主体输出目录 编译后class文件存放的地方
		
	》使用的jdk版本
	》》默认是1.5
	》》可以修改settings.xml 更改需要默认版本 
	》》》具体修改如下：
	<profile>
      <id>jdk-1.8</id>

      <activation>
		<activeByDefault>true</activeByDefault>
        <jdk>1.8</jdk>
      </activation>

      <properties>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>
	  </properties>
    </profile>
	
	》pom.xml 是maven的基础配置也成为项目对象模型描述文件。
	》》<groupId>
	》》<artifactId>
	》》<version> 
	》》<packaging>   打包之后的格式 war 、jar
	》》<parent>
	》》》<groupId>org.springframework.boot</groupId>
	》》》<artifactId>spring-boot-starter-parent</artifactId>
	》》》<version>1.5.8.RELEASE</version>
	》》》<relativePath />
	》》<properties> 定义全局属性

整合springMVC之后的注解的使用：
	》@RestControl
	》》此注解是一个组合注解
	》》相当于springMVC中的@Control+@ResponseBody
	》@SpringBootApplication
	》》指定这是一个springboot程序
	》》此注解是一个组合注解
	》》相当于@SpringConfiguration+@EnableAutoConfiguration+@ComponentScan
	》》SpringApplication.run(App.class, args);  从main方法 启动spring应用类

核心注解：
	》@SpringBootApplication 标注入口类注解，
	》》main方法中SpringApplication.run(App.class, args);可以直接启动springboot
	》组合了以下注解：
	》》@SpringConfiguration spring boot的配置注解
	》》@EnableAutoConfiguration 启动自动配置，
	》》@ComponentScan 扫描配置
	》关闭某个自动配置：
	》》@SpringBootApplication(exclude={RedisAutoConfiguration.class}) 不自动配置redis
自动配置原理：
	》在进行SpringApplication对象实例化会加载MATA-INF/spring.factories文件
	》》将该配置文件中的配置载入Spring容器进行自动配置
	
	》源码分析：
	》》首先启动SpringApplication.run(App.class, args)
	》》org/springframework/boot/Spring Application.java
	public static ConfigurableApplicationContext run (Object[] sources, String[] args){
		return new SpringApplication (sources).run (args);
	}
	可以看到rn方法实际上在创建 SpringApplication对象实例，如下
	》》org/ springframework/boot/SpringApplication. java
	public SpringApplication (Object... sources){
		initialize(sources);
	}
	调用了initialize方法，如下
	》》org/ springframework/boot/SpringApplication.java
	private void initialize(Object[] sources){
		if(sources != null && sources.length >0){
			this sources.addAll(Arrays.asList(sources));
		}
		this.webEnvironment = deduceWebEnvironment ();
		setInitializers((Collection) getspringFactoriesInstances(
			AplicationcontextInitializer. class));
		setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));
		this.mainApplicationClass = deduceMainApplicationclass();
	}
	initialize方法中调用getSpringFactoriesInstances方法，如下
	》》org/ springframework/boot/SpringApplication.java
	private <T> Collection<? extends T> getSpringFactoriesInstances (Class<T> type
		, Classs<?>[] parameterTypes, Object... args){
		ClassLoader classLoader= Thread.currentThread().getContextclassLoader();	
		// Use names and ensure unique to protect against duplicates
		Set<string> names = new LinkedHashSet<string>(
			SpringFactoriesLoader.loadFactoryNames(type, classLoader));
		List<T> instances= createSpringFactoriesInstances(type, parameterTypes,
			classLoader, args, names);
		AnnotationAwareOrdercomparator.sort(instances);
		return Instances;
	}
	上面代码调用了loadFactoryNames方法，如下：
	》》org/ springframework/boot/SpringApplication.java
	public static List<string> loadFactoryNames(Class<？> factoryclass, ClassLoader 
		classLoader){
		string factoryclassName = factoryClass.getName();
		try{
			Enumeration<URL> urls = 
				(classLoader != null 
				? classLoader.getResources(FACTORIES_RESOURCE_LOCATION)
				: ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));
			List<string> result = new ArrayList<string>();
			while(urls. hasMoreElements()){
				URL url= urls.nextElement();
				Properties properties = PropertiesLoaderUtils.loadProperties(new
					UrlResource(url));
				String factoryclassNames = properties.getProperty(factoryclassName);
				result.addAll(Arrays.asList(StringUtils.commaDelimitedListTostringArray
					(factoryclassNames)));
			}
			return result;
		}catch(IOException e){
		
		}
	}
	在上述源码中可以看到加载了一个常量：FACTORIES_RESOURCE_LOCATION
	public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";
	所以最终spring boot是通过加载META-INF/spring.factories文件进行自动配置的 
	
	》spring.factories分析：
	》》该文件非常重要，用来指导spring boot找到指定的自动配置文件
	》》分析如下：
	》》》PropertySource Loaders
	org.springframework.boot.env.PropertySourceLoader=
	\org.springframework.boot.env.PropertiesPropertySourceLoader,
	\org.springframework.boot.env.YamlPropertySourceLoader
	》》》Run Listeners
	org.springframework.boot.SpringApplicationRunListener=
	\org.springframework.boot.context.event.EventPublishRunListener
	配置了运行监听器类，默认会加载EventPublishRunListener
	》》》Application Context Initializers
	org.springframework.context.ApplicationContextInitializer=
	\org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,
	\org.springframework.boot.context.ContextIdApplicationContextInitializer,
	\org.springframework.boot.context.config.DelegationgApplicationContextInitializer,
	\org.springframework.boot.context.embedded.ServerPortInfoApplicationContextInitializer
	以上配置默认加载四个ApplicationContextInitializer类
	ConfigurationWarningsApplicationContextInitializer 报告常见的错误
	ContextIdApplicationContextInitializer 给ApplicationContext 设置一个ID
	DelegationgApplicationContextInitializer 将初始化的工作委托给context.initializer.classes环境变量指定的初始化器
	ServerPortInfoApplicationContextInitializer 
	》》》监听的配置：
	context容器完成refresh方法时 清除缓存信息
	容器关闭时发出通知，如果父容器关闭那么子容器也关闭
	》》》等其他关于spring.factories的配置，这里省略介绍
	
	
整合Thymeleaf：
	配置：
		默认：
			prefix：classpath:/templates/
			suffix：.html
			...
		自定义：（在application.property中添加）
			spring.thymeleaf.prefix				
			spring.thymeleaf.suffix
			spring.thymeleaf.mode			模板模式 HTML
			spring.thymeleaf.encoding		模板编码
			spring.thymeleaf.content-type	模板类型 text/html
			spring.thymeleaf.cache			模板缓存
	依赖模块：
		spring-boot-starter-thymeleaf

application.yml文件：

#server.port=8080

#mybatis.config-locations=classpath:mybatis/conf.xml
#mybatis.mapper-locations=classpath:mybatis/mapping/*.xml
#mybatis.type-aliases-package=com.svse.entity

#server.tomcat.uri-encoding=utf-8

#spring.datasource.url=jdbc:mysql://120.79.149.233:3306/shop
#spring.datasource.username=chenjiwei
#spring.datasource.password=cjw168999
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.content-type=text/html
#spring.thymeleaf.cache=false
#spring.thymeleaf.mode=LEGACYHTML5

server:
  port: 8080
spring:
  datasource:
    username: chenjiwei
    password: cjw168999
    url: jdbc:mysql://120.79.149.233:3306/shop
    driver-class-name: com.mysql.jdbc.Driver
    hikari:
      idle-timeout: 60000
      maximum-pool-size: 30
      minimum-idle: 10
logging:
  level:
    com.chen: debug
// 上传的配置
servlet:
  multipart:
    max-file-size: 10MB
    max-request-size: 10MB
// thymeleaf的设置
#thymeleaf:
#  mode: HTML5
#  encoding: UTF-8
#  servlet:
#    content-type: text/html

实践：
	》https://blog.csdn.net/pbl_create/article/details/88091866 零基础搭建springboot
	》@RequestMapping("/hello") 映射mapping
	》》访问方式： http://localhost:8080/hello
	》》添加新的映射要重启项目，修改字符串无需重启
	

	
遇到的问题：
	》web.xml is missing and <failOnMissingWebXml> is set to true
	》SpringBoot启动报错Failed to determine a suitable driver class
	》》将mybatis依赖注释掉 当前项目用的是hibernate 如需使用，需配置batis相关的配置在application中
	

目录：
	#简单词汇的解释#
	#两种框架的区别#
	#两个框架各自的优势#
	#两个框架的相同点#
	#两大框架总结#
	#Hibernate#
	#MyBatis#
		简介	
		核心API
		#{}、${}的区别
		resultType 返回类型
		jdbcType类型归纳
	#如何防止sql注入#
#简单词汇的解释#：
	ORM - Object Relational Mapping 对象关联映射
	
#Hibernate#
	简介：	
		是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，
		是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，
		使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。
	核心API Configuration SqlSessionFactory Session Transaction
		Configuration config = new Configuration() ;
		config.configure("配置文件") ;
		SessionFactory sf  = config.buildSessionFactory() ;	
		Session session  = sf.openSession() ;
		Transaction tx = session.beginTransaction() ;
	Hibernate中共提供了三种检索方式：
		HQL(Hibernate Query Language)、QBC(Query By Criteria)、QBE(Query By Example)。
		HQL:
			Query query = this.getCurrentSession().createQuery(hql);
			query.setParameter(i, values[i]);
			(List<T>) query.list();
		QBC:
			getCurrentSession().createCriteria(entityClass).add(Restrictions.eq(property, value)).list();
#MyBatis#
	简介：	
		是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。
	核心API SqlSessionFactory SqlSessionFactoryBuilder SqlSession 
		SqlSessionFactory sessionFactory = new SqlSessionFactoryBuilder().build(new InputStream()) ;
		SqlSession session  = sessionFactory.openSession() ; 
        HotelMapper hotelMapper = session.getMapper(HotelMapper.class);
	#{}、${}的区别：
	#{}：
	》PreparedStatement ps = conn.prepareStatement(sql);
	》ps.setInt(1,id);
	》好处：
	》更安全，更迅速，通常也是首选做法。防止sql注入攻击
	${}：
	》Statement st = conn.createStatement();
	》ResultSet rs = st.executeQuery(sql);
	》缺点：
	》以这种方式接受从用户输出的内容并提供给语句中不变的字符串是不安全的，会导致潜在的 SQL 注入攻击，
	》》因此要么不允许用户输入这些字段，要么自行转义并检验。
	
	resultType 返回类型：
		javaBean ：
			java代码： 
				Employee getEmpById(Integer id);
			配置：
				<select id="getEmpById" resultType="employee">
		List<T> ：
			java代码： 
				List<Employee> getAllEmps();
			配置：
				<select id="getAllEmps" resultType="employee"> // 返回值类型是集合内存储数据的类型，不是 'list'
		Map<String, Object> ：
			查询结果为一条：
				Map中的数据格式为{表字段名， 对应的值}
				java代码： 
					Map<String, Object> getEmpAsMapById(Integer id);
				配置：
					<select id="getEmpAsMapById" resultType="map">
			查询结果为多条：
				Map中的数据格式为{表字段名， 对应的值}
				java代码： 
					Map<String, Object> getEmpAsMapById(Integer id);
				配置：
					<select id="getEmpAsMapById" resultType="map">
		自定义返回一个对象中的那些字段：
			使用心得
				再多表查询中可能内心会问，此处配置了关联，对面需要配置关联吗。答案是不需要
				
			java代码： 
				List<DdChargeWater> gets();
			配置：
				// resultMap 内容为空 按给定类型DdChargeWater中的属性映射
				<resultMap id="userList" type="com.blog.entity.DdChargeWater"> </resultMap>
				/*
				在resultMap 中自定义映射字段属性，这多用于多表查询
				<resultMap id="userList" type="com.blog.entity.DdChargeWater">
					<id column="表的主键字段，或者可以为查询语句中的别名字段" jdbcType="字段类型" property="映射pojo对象的主键属性" />
					<association property="pojo的一个对象属性" javaType="pojo关联的pojo对象">
						<id column="关联pojo对象对应表的主键字段" jdbcType="字段类型" property="关联pojo对象的主席属性"/>
						<result  column="任意表的字段" jdbcType="字段类型" property="关联pojo对象的属性"/>
					</association>
					<!-- 集合中的property须为oftype定义的pojo对象的属性-->
					<collection property="pojo的集合属性" ofType="集合中的pojo对象">
						<id column="集合中pojo对象对应的表的主键字段" jdbcType="字段类型" property="集合中pojo对象的主键属性" />
						<result column="可以为任意表的字段" jdbcType="字段类型" property="集合中的pojo对象的属性" />  
					</collection>
				</resultMap>
				*/
				<select id="gets" resultMap="userList" useCache="false">
					SELECT * FROM ${table}
				</select>
		以及返回Boolean，Integer 等；
	jdbcType类型归纳 
		Mybatis中javaType和jdbcType对应关系：
		----------------------------------------------------
		JDBC Type			Java Type
		----------------------------------------------------
		CHAR                String
		VARCHAR          	String
		LONGVARCHAR       	String
		NUMERIC          	java.math.BigDecimal
		DECIMAL            	java.math.BigDecimal
		BIT                	boolean
		BOOLEAN          	boolean
		TINYINT           	byte
		SMALLINT            short
		INTEGER         	int
		BIGINT           	long
		REAL                float
		FLOAT             	double
		DOUBLE            	double
		BINARY            	byte[]
		VARBINARY         	byte[]
		LONGVARBINARY      	byte[]
		DATE                java.sql.Date
		TIME                java.sql.Time
		TIMESTAMP        	java.sql.Timestamp
		CLOB                Clob
		BLOB                Blob
		ARRAY            	Array
		DISTINCT            mapping of underlying type
		STRUCT            	Struct
		REF                	Ref
		DATALINK            java.net.URL[color=red][/color]
		----------------------------------------------------
		
		Mybatis中javaType和jdbcType对应和CRUD例子：
		<resultMap type="java.util.Map" id="resultjcm">
		  <result property="FLD_NUMBER" column="FLD_NUMBER"  javaType="double" jdbcType="NUMERIC"/>
		  <result property="FLD_VARCHAR" column="FLD_VARCHAR" javaType="string" jdbcType="VARCHAR"/>
		  <result property="FLD_DATE" column="FLD_DATE" javaType="java.sql.Date" jdbcType="DATE"/>
		  <result property="FLD_INTEGER" column="FLD_INTEGER"  javaType="int" jdbcType="INTEGER"/>
		  <result property="FLD_DOUBLE" column="FLD_DOUBLE"  javaType="double" jdbcType="DOUBLE"/>
		  <result property="FLD_LONG" column="FLD_LONG"  javaType="long" jdbcType="INTEGER"/>
		  <result property="FLD_CHAR" column="FLD_CHAR"  javaType="string" jdbcType="CHAR"/>
		  <result property="FLD_BLOB" column="FLD_BLOB"  javaType="[B" jdbcType="BLOB" />
		  <result property="FLD_CLOB" column="FLD_CLOB"  javaType="string" jdbcType="CLOB"/>
		  <result property="FLD_FLOAT" column="FLD_FLOAT"  javaType="float" jdbcType="FLOAT"/>
		  <result property="FLD_TIMESTAMP" column="FLD_TIMESTAMP"  javaType="java.sql.Timestamp" jdbcType="TIMESTAMP"/>
		 </resultMap>
		
#两种框架的区别#：
	1、开发速度的对比
		Hibernate的真正掌握要比Mybatis来得难些。Mybatis框架相对简单很容易上手，
		但也相对简陋些 对于简单的增删改查，这样选择hibernate效率就很快了。
		复杂语句较多，使用MyBatis
	2、开发工作量的对比
		Mybatis需要手动编写SQL语句，以及ResultMap。
		Hibernate有良好的映射机制，开发者无需关心SQL的生成与结果映射，可以更专注于业务流程。
	3、sql优化方面	
		Hibernate的查询会将表中的所有字段查询出来，这一点会有性能消耗。
		Hibernate也可以自己写SQL来指定需要查询的字段，但这样就破坏了Hibernate开发的简洁性。
		而Mybatis的SQL是手动编写的，所以可以按需求指定查询的字段。
	4、对象管理的对比
		Hibernate是完整的对象/关系映射，采用了更自然的面向对象的视角来持久化 Java 应用中的数据。
		MyBatis用户自己需要对对象进行详细的管理。
	5、缓存机制
		Hibernate更好的二级缓存，缓存时如果出现脏数据，系统会报出错误并提示
		MyBatis二级缓存机制不佳
	6、移植性
		hibernate拥有完整的对象关系映射和hql语言，大大的降低了对象与数据库的耦合性，
		而mybatis需要手动的写sql语句，遇到不同的数据库可能需要更改sql语句来适配当前数据库。
	7、日志系统
		hibernate日志系统非常健全，涉及广泛，包括：sql记录、关系异常、优化警告、缓存提示、脏数据警告等;
		mybatis则除了基本记录功能外，功能薄弱很多。
#spring data jpa区别于batis：
	1、jpa写动态sql不方便，拼字符串太麻烦了，不如xml方便。
		* 不能写动态sql那就要在方法名上面拼接属性，
		  查的条件都各不相同，就得定义多个查询方法
		* 而batis只需要定义一个方法，查询可以动态的判断查询的条件
	2、mybatis自己定义结果集太麻烦了，不如jpa直接把关系映射在类上方便。	
		多表查询，需要定义resultMap
	
	
#两个框架各自的优势#：
	Mybatis优势
		MyBatis可以进行更为细致的SQL优化，可以减少查询字段。
		MyBatis容易掌握，而Hibernate门槛较高。
	Hibernate优势
		Hibernate的dao层开发比MyBatis简单，MyBatis需要维护SQL和结果映射
		Hibernate对对象的维护和缓存要比MyBatis好，对增删查改的对象的维护要方便。
		Hibernate数据库移植很好，MyBatis的数据库移植性不好，不同的数据库需要写不同的SQL
		Hibernate有更好的二级缓存机制，可以使用第三方缓存。MyBatis本身提供的缓存机制不佳。
		
#两个框架的相同点#：
	Hibernate与MyBatis都可以是通过SessionFactoryBuider由XML配置文件生成SessionFactory，
	然后由SessionFactory 生成Session，最后由Session来开启执行事务和SQL语句。
	其中SessionFactoryBuider，SessionFactory，Session的生命周期都是差不多的。
	Hibernate和MyBatis都支持JDBC和JTA事务处理。
	
#两大框架总结#：
	*Hibernate功能强大，数据库无关性好，O/R映射能力强，如果你对Hibernate相当精通，而且对Hibernate进行了适当的封装，
	那么你的项目整个持久层代码会相当简单，需要写的代码很少，开发速度很快，非常爽。
	*Hibernate的缺点就是学习门槛不低，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡取得平衡
	以及怎样用好Hibernate方面需要你的经验和能力都很强才行。
	*iBATIS入门简单，即学即用，提供了数据库查询的自动对象绑定功能，而且延续了很好的SQL使用经验，
	对于没有那么高的对象模型要求的项目来说，相当完美。
	*iBATIS的缺点就是框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，
	但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。

MyBatis面试题
		1、Ibatis和Mybatis？
		》Ibatis：2010年，apache的Ibatis框架停止更新，并移交给了google团队，同时更名为MyBatis。
		》MyBatis：Ibatis的升级版本
		
		2、什么是Mybatis的接口绑定，有什么好处？
		》Mybatis实现了DAO接口与xml映射文件的绑定，自动为我们生成接口的具体实现，使用起来变得更加省事和方便。
		
		3、什么情况注解，什么情况用xml绑定？
		》注解使用：SQL语句简单时
		》xml绑定使用情况：xml绑定（@RequestMap用来绑定xml文件）
		
		4、MyBatis的核心处理类叫什么
		》SqlSession
		
		5、查询表名和返回实体Bean对象不一致，如何处理？
		》映射键值对即可
		》<result column="title" property="title" javaType="java.lang.String" />
		》column：数据库中表的列名
		》property：实体Bean中的属性名
		
		6、MyBatis的好处？
		》把Sql语句从java中独立出来
		》封装了底层的JDBC，API的调用，并且能够将结果集自动转换成JavaBean对象，简化了java数据库编程的重复工作
		》自己编写Sql语句，更加的灵活
		》入参无需用对象封装，使用@param注解
		
		7、MyBatis配置一对多？
		》<collection property="topicComment" column="id" ofType="com.tmf.bbs.pojo.Comment" select="selectComment" />
		》property：属性名
		》column：共同列
		》ofType：集合中元素的类型
		》select：要连接的查询
		
		8、MyBatis配置一对一？
		》<association property="topicType" select="selectType" column="topics_type_id" javaType="com.tmf.bbs.pojo.Type" />
		》property：属性名
		》select：要连接的查询
		》column：共同列
		》javaType：集合中元素类型
		
		9、${} 和 #{}的区别？
		》${}：简单字符串替换，把${}直接替换成变量的值，不做任何转换，这种是取值以后再去编译SQL语句
		》#{}: 预编译处理，sql中的#{}替换成？补全预编译语句，有效的防止Sql语句注入，这种取值是编译好SQL语句再取值
		
		10、获取上一次自动生成的主键值？
		》select last _insert_id()
		
		11、MyBatis如何分页，分页原理？
		》RowBounds对象分页
		》在Sql内直接书写，带有物理分页
		
		12、MyBatis工作原理？
		》图片请看当前目录（MyBAtis工作原理.jpg）
		》原理：
		》通过SqlSessionFactoryBuilder从mybatis-Config.xml配置文件中构建出SqlSessionFactory。
		》SqlSessionFactory开启一个SqlSession，通过SqlSession实例获得Mapper对象并且运行Mapper映射的Sql语句
		》完成数据库的CRUD操作和事务提交，关闭SqlSession
	
#如何防止sql注入#：
	注入案例：
	》
		比如在一个登录界面，要求输入用户名和密码：
		可以这样输入实现免帐号登录：
		用户名： ‘or 1 = 1 –-
		密 码：
		点登陆,如若没有做特殊处理,那么这个非法用户就很得意的登陆进去了
		从理论上说，后台认证程序中会有如下的SQL语句：
		String sql = "select * from user_table where username=
		' "+userName+" ' and password=' "+password+" '";
		当输入了上面的用户名和密码，上面的SQL语句变成：
		SELECT * FROM user_table WHERE username='’or 1 = 1 -- and password='’
		然后后面加两个-，这意味着注释，它将后面的语句注释
	》
		把password内容设置为 "or 1=1 -- "
	
	防止注入：
	1.开启php的魔术模式
	》magic_quotes_gpc = on即可，当一些特殊字符出现在网站前端的时候，
	》就会自动进行转化，转化成一些其他符号导致sql语句无法执行。
	2.网站代码里写入过滤sql特殊字符的代码
	》对一些特殊字符进行转化，比如单引号，逗号，*
	3.开启网站防火墙
	》IIS防火墙，apache防火墙，nginx防火墙
	》都有内置的过滤sql注入的参数
	
	针对jsp的防止注入： 引用：https://www.cnblogs.com/baizhanshi/p/6002898.html
	1.使用PreparedStatement
	》代码的可读性和可维护性.PreparedStatement尽最大可能提高性能.最重要的一点是极大地提高了安全性.
	2.使用正则表达式过滤传入的参数
	》private String CHECKSQL = “^(.+)\\sand\\s(.+)|(.+)\\sor(.+)\\s$”;
	》Pattern.matches(CHECKSQL,targerStr);
	3.字符串过滤
	4.jsp中调用该函数检查是否包函非法字符
	5.JSP页面判断代码
	》检查是否含有”‘”,”\\”,”/”
	
	个人防注入的方式：
	1.使用正则表达式过滤传入的参数
	2.使用PreparedStatement预编译，例如在mybatis配置文件中使用#符号（就是避免拼接sql语句
	3.应对登录注入，根据用户名查询出对象，再进行对象的密码校验，
	》这不会有注入问题，例如对密码进行加密存储，比对校验密码的时候也会加密后再校验

	注入案例：
	》https://blog.csdn.net/weixin_30624825/article/details/97223746?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1.nonecase
	1.登录注入 
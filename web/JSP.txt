实践资料请见：E:\学习\《JSP&Servlet实战开发》
目录：
	》简介：
	》JSP的优势：
	》生命周期：
	》jsp语法：
	》过滤器：
	》九大内置对象：
	》jsp中文乱码的解决：
	》常用指令：
	》#EL表达式#：
	》引用：
	
简介：
	》Java Server Pages，是一种动态网页开发技术。jsp做页面的展现
	
	》mar,13,2019
	》Servlet是一个功能，如果你希望你的项目功能多一些，那就要多写一此Servlet；
	》Servlet是JavaWeb三大组件之一，也是最重要的组件！ 三大组件：Servlet、Filter、Listener
	》须要实现javax.servlet.Servlet接口。
	》Servlet是动态资源
	》以往理解:
	》可以响应客户端请求，而动态生成 HTML、XML 或其他格式文档的Web网页的技术标准。
	》Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以<%开头以%>结束。
	》Servlet对于逻辑处理是非常方便的，但是对于页面的展现是非常麻烦的。
	》》JSP的诞生是为了解决Servlet页面展现麻烦的问题的。
	》一般我们需要将两门技术结合使用，Servlet做业务处理，jsp做页面的展现
	》在我们访问jsp文件的时候，并没有直接去执行JSP文件，而是被服务器所拦截执行了jspServlet的类。
	》》此类会将jsp文件转译成对应的Servlet文件并执行。所以jsp本质还是Servlet。
		
JSP的优势：
	》与ASP相比：1、动态部分用Java编写，所以更加强大与易用。2、JSP易于移植到非MS平台上。
	》与纯 Servlet 相比：JSP可以很方便的编写或者修改HTML网页而不用去面对大量的println语句。
	》与SSI相比：SSI无法使用表单数据、无法进行数据库链接。
	》与JavaScript相比：JavaScript很难与服务器交互，不能提供复杂的服务，比如访问数据库和图像处理等等。
	》与静态HTML相比：静态HTML不包含动态信息。
	》总结：部分用java编写，易用；易于移植；方便编写或者修改HTML网页；使得与服务器交互更容易；
	
生命周期：
	》编译/加载阶段：编译servlet源文件，生成servlet类
	》初始化阶段：加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法
	》执行阶段：调用与JSP对应的servlet实例的服务方法
	》销毁阶段：调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例
	jsp工作原理：
	》第一步是翻译阶段，Web服务器会将接收到的JSP文件翻译成Java文件。
	》第二步是编译阶段，Web容器将Java文件编译成字节码文件(.class文件)。
	》第三步是执行阶段，Web容器执行字节码文件将生成的结果返回给客户端进行显示。
	
jsp语法：
	》参考思维导图
	*java代码声明：
	》<%java代码%>  会被转译到——jspServlet方法中，局部代码
	*全局代码段声明：
	》<%!声明方法%> 会被转译成全局代码
	*表达式语句（重要）：
	》<%=变量名/方法 %> 后面一定不能加分号
	*注释：
	》HTML注释：	会被转译并发送到客户端
	》css注释： 	会被转译，还会被发送
	》js注释：		会被转译，还会被发送
	》java注释：	会被转译
	》jsp注释：		%-- 注释内容 --%  直接不转译
	
过滤器：
	过滤器类型：
	》身份验证过滤器（
	》数据压缩过滤器
	》加密过滤器
	》触发资源访问事件过滤器
	》图像转换过滤器
	》日志记录和审核过滤器
	》MIME-TYPE 链过滤器
	》标记化过滤器
	》XSL/T 过滤器（XSL/T Filters），转换 XML 内容。
	过滤器:
	》实现了 javax.servlet.Filter 接口的 Java 类
	》void doFilter (ServletRequest, ServletResponse, FilterChain) 先调用
	》void init(FilterConfig filterConfig) web 应用程序启动时 FilterConfig 获取<init-param>参数
	》void destroy() Servlet容器在销毁过滤器实例前调用

九大内置对象：
	四个作用域：
	》pageContext 页面上下文对象，此对象封装了其他对象的获取方式 当前页面有效
	》request     请求对象 同一个请求范围内有效
	》session     session对象 同一个会话有效
	》application ServletContext对象 整个WEB服务器有效
	两个输出：
	》out         输出对象
	》response    输出对象，比resp对象多了缓冲区，效率提高
	其他三个：
	》page        代表该页面对象        
	》config	  ServletConfig
	》exception   异常对象，弃用	

jsp中文乱码的解决：
	》生成中文乱码的根本原因，jsp页面默认编码格式“ISO-8859-1” 不支持中文
	》三种支持中文的编码方式：gb2312（常用简体），gbk（比前者好），utf-8（国际编码）
	post方式提交表单的解决方案：
	》1、request.setCharacterEncoding("utf-8")
	》2、response.setCharacterEncoding("utf-8")
	get方式提交表单的解决方案：
	》1.读取数据时对数据进行编码 new String(s.getBytes("iso-8859-1"), "utf-8")
	》2.通过配置文件设置解决中文乱码显示
	》》配置tomcat\conf\server.xml文件
	》》<Connector connectionTimeout="20000" port="8080" protocol="HTTP/1.1"
	》》redirectPort="8843" URIEncoding="UTF-8" />
	
常用指令：
	page：
	》language 声明jsp文件支持的语言
	》import   转译的时候导入的包
	》pageEncoding  设置转译及客户端展现数据的编码格式
	》session   true代表使用session对象（默认） false不适用session对象
	》errorPage jsp运行错误会自动跳转到指定页面
	include：（转译成一个Servlet类）
	》静态引入：  <%@include file="include01.jsp" %> 不能出现同名的变量，耦合性高
	》》先将页面包含，后执行页面代码  只执行一个文件
	》动态引入：  <jsp:include page="include02.jsp"></jsp:include> 可以出现同名的变量耦合性低
	》》先执行页面代码，后将页面包含  执行两个文件
	查阅：https://www.cnblogs.com/dorra/p/7078166.html 
		很详细的讲解了两种include包含html和jsp的区别
	查阅：https://blog.csdn.net/u012187452/article/details/51779052
		详细的解析两种方式的基本概念
	查阅：https://www.jb51.net/article/117075.htm
		对嵌入页面的讲解
	forward：
	》请求转发（自带return）
	》<jsp:forward page="要求转发的文件路径">
	》	<jsp:param value="值" name="键" />
	》</jsp:forward>	
	》服务器端发挥的作用，提交信息在多个页面间进行传递。并且可以共享request范围内的数据。
	》与重定向的区别：
	》》重定向是在客户端发挥作用，通过请求新的地址实现页面的转向。
	》》并且不能共享request范围内的数据。
	
使用案例：
	导入jstl function标签
		<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %> 
		集合
		<c:forEach items="${messagelist }" var = "message">  
			 <h3>${fn:length(messagelist) }</h3>  
		</c:forEach>
	前后台向前台传递
		${msg}   后台msg： model(Model).addAttribute("msg", "内容");
 	
#EL表达式#：
	学习案例：（http://www.cnblogs.com/zhplovelnn/p/6947696.html）
	*描述：
	》${javaBean.property}
	》EL 提供 . 和 [ ] 两种运算符来导航数据。 
	》${sessionScope.user.sex}等于${sessionScope.user["sex"]}
	》当要存取的属性名称中包含一些特殊字符，如. 或 – 等并非字母或数字的符号，就一定要使用 [ ]，
	》》例如：${user.My-Name } ，应当改为：${user["My-Name"] }
	》${sessionScope.user[data]} 假如data是动态变量
	》》如果要动态取值时，就可以用上述的方法来做，但. 无法做到动态取值。
	*隐含对象（11个）：
	》pageContext		表示JSP的PageContext
	》RequestScope		指定范围
	》sessionScope		指定范围
	》applicationScope	指定范围
	》PageScope         指定范围
	》param				ServletRequest.getParameter(String name)。
	》paramValues		ServletRequest.getParameterValues(String name)。
	》header			ServletRequest.getHeader(String name)。
	》headerValues		ServletRequest.getHeaders(String name)。
	》cookie			HttpServletRequest.getCookies()
	》initParam			ServletContext.getInitParameter(String name)。
	使用pageContext：
	》${pageContext.request.queryString}	取得请求的参数字符串
	》${pageContext.request.requestURL}		取得请求的URL，但不包括请求之参数字符串,即servlet的HTTP地址。
	》${pageContext.request.contextPath}	服务的webapplication的名称
	》${pageContext.request.method}			取得HTTP的方法(GET、POST)
	》${pageContext.request.protocol}		取得使用的协议(HTTP/1.1、HTTP/1.0)
	》${pageContext.request.remoteUser}		取得用户名称
	》${pageContext.request.remoteAddr}		取得用户的IP地址
	》${pageContext.session.new}			判断session是否为新的，所谓新的session，表示刚由server产生而client尚未使用
	》${pageContext.session.id}				取得session的ID
	》${pageContext.servletContext.serverInfo}	取得主机端的服务信息
	*EL算术运算：
	》所有在Java语言里支持的算术运算符，表达式语言都可以使用；
	*EL关系运算符：
	*EL逻辑运算符：
	*Empty 运算符：
	》Empty 运算符主要用来判断值是否为空（NULL,空字符串，空集合）。
	*条件运算符
	》${ A ? B : C}
	
引用：
	》http://www.runoob.com/jsp/jsp-page-redirect.html
	》》学习网站
	》https://www.cnblogs.com/haozhengfei/p/6537909.html
	》》jsp的使用
	》https://www.cnblogs.com/du-0210/p/8426624.html
	》》web基础知识 http servlet
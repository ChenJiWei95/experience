实践资料请见：E:\学习\《JSP&Servlet实战开发》
servlet：
	目录：
	》简介/定义：
	》Servlet 优势：
	》Servlet生命周期：
	》Servlet运行原理/Servlet的运行过程
	》Servlet访问URL映射配置：
	》Servlet线程安全问题：
	》ServletConfig
	》include和forward
	》请求和重定向
	》会话Cookie Session
	》面试题：
	
	简介/定义：
	》用于开发动态web资源的技术，Servlet做业务处理
	
	》mar,13,2019
	》Servlet是一个功能，如果你希望你的项目功能多一些，那就要多写一此Servlet；
	》Servlet是JavaWeb三大组件之一，也是最重要的组件！ 三大组件：Servlet、Filter、Listener
	》须要实现javax.servlet.Servlet接口。
	》Servlet是动态资源
	》以往：
	》独立于平台和协议的服务器端的java应用程序，处理请求的信息并将其发送到客户端。
	》客户端可以提出请求并动态获得响应。
	》动态生成web页面，担当浏览器或其他客户端发出的请求与HTTP服务器上的数据库或应用程序之间的中间层。
	》对于所有客户端请求，都只需要创建一次Servlet实例，因此，节省了大量内存。
	》Servlet是sun公司提供的一门用于开发动态web资源的技术
	》sun公司在其API中提供了一个servlet接口
	》开发一个动态web资源，两个步骤：
	》1、编写一个java类，实现servlet接口
	》2、把开发好的java类部署到web服务器中
	
	Servlet 优势：（跨平台、API标准完善、新请求新线程、使用方便）
	》具有优良的跨平台性
	》可移植性良好：java语言编写，Servlet API标准完善，企业编写的Servlet程序可轻松移植到其他服务器中;
	》执行效率高：Servlet请求到来时激活Servlet，处理完成后等待新请求；新请求产生新线程，而不是进程；
	》使用方便：可轻松处理HTML表单数据，并读取和设置HTTP头，处理cookie,跟踪会话；
	
	Servlet生命周期：
	》加载和实例化
	》初始化
	》请求处理
	》服务终止
	
	Servlet运行原理：
	》web服务器收到一个http请求后，判断请求内容，若是静态页面数据，自行处理，若为动态数据，
	》》交给Servlet容器，Servlet容器找到相应Servlet实例处理；处理结果交给web服务器，
	》》再转交给客户端。
	》针对同一个Servlet，Servlet容器会在第一次收到HTTP请求时建立一个Servlet实例，
	》》然后启动一个线程，第二次收到http请求后，Servlet容器无需创建相同Servlet ,
	》》仅开启第二个线程来处理请求。多线程的方式有效提高执行效率，降低服务器负担。
	Servlet的运行过程
	servlet程序是由WEB服务器调用，web服务器收到客户端的Servlet访问请求后：
	》1、Web服务器首先检查是否已经装载并创建了该Servlet的实例对象。如果是，则执行4
	》2、装载并创建该Servlet的一个实例对象
	》3、调用Servlet实例对象的init()方法 只调用一次，对一些内容初始化
	》4、创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应消息的HttpServletResponse对象，
	》》然后调用Servlet的service方法并将请求和响应对象作为参数传递进去。
	》5、WEB应用程序被停止或重新启动之前，Servlet引擎将卸载Servlet，
	》》并在卸载之前调用Serlvet的destroy()方法（以便释放它所使用的资源）
	
	Servlet访问URL映射配置：
	》<servlet>
	》	<servlet-name>ServletDemo1</servlet-name>
	》	<servlet-class>com.chen.serlvet<servlet-class>
	》</servlet>
	》<servlet-mapping>
	》 	<servlet-name>ServletDemo1</servlet-name>
	》	<url-pattern>/servlet/ServletDemo1</url-pattern>
	》</servlet-mapping>
	》或者使用注解：@Servlet
	》缺省配置：
	》<servlet>...<load-on-startup>1</load-on-startup></servlet>
	》<servlet-mapping>...<url-pattern>/</url-pattern></servlet-mapping>
	
	Servlet线程安全问题：
	》当多个客户端并发访问同一个Servlet时，web服务器会为每一个客户端的访问创建一个线程，
	》》并在这个线程上调用Servlet的service方法，因此service方法内如果访问了同一个资源的话，
	》》就有可能引发线程安全问题。
	》解决的方法：让Servlet去实现一个SingleThreadMode接口，
	》》Servlet引擎将以单线程模式来调用其service方法。
	》》尽可能不创建成员变量，因为成员变量多个线程会共享或者创建功能性的，只读
	
	ServletConfig
	配置文件：
	<servlet>
		<servlet-name></servlet-name>
		<servlet-class></servlet-class>
		<init-param>
			<param-name>user</param-name>
			<param-value>username</param-value>
		</init-param>
	</servlet>
	代码获取：
	》private ServletConfig config;
	》@Override
	》public void init(ServletConfig config) throws ServletException {
	》    this.config = config;
	》}
	》String username=config.getInitParameter("user");
	
	ServletContext
	》ServletContext context = this.getServletConfig().getServletContext();//获得ServletContext对象
	》context.setAttribute("data", data);  				//将data存储到ServletContext对象中
	
	include和forward：
	》forward方法就是将请求继续往下传 传递的参数一直都是可以访问 
	》》应用场景，验证后继续往下传，例如登录判断用户是否为空，不为空 继续
	》
	》RequestDispatcher rd = request.getRequestDispatcher("forward.do");
	》》rd.forward(request, responce);
	》》rd.include(request, response);
	》include方法是将另一个servlet中的输出内容包含进来
	
	
	转发重定向
	》转发
	》RequestDispatcher rd = request.getRequestDispatcher(“/BServlet”);//参数是要转发的目标
	》rd.forward(request,response);//转发到BServlet
	》可以理解成在一个Servlet中，调用另一个Servlet的service()方法。
	》在转发语句之后，其他语句是否会执行？答案是“可以”
	》不能在一个Servlet中即重定向，又转发。
	》
	》重定向
	》response.sendRedirect(“/项目名/…”);
	》两个请求。 
	》第一个请求，服务器响应码：302
	》第一个请求的响应头有一个Location头，它说明了要重定向的URL；
	》第二个请求，浏览器重新向Location头指定的URL发出。
	》重定向：可以重定向到本项目内的其他资源，可以使用相对路径，以“/项目名”开头
	》重定向：会使浏览器的地址栏发生变化！
	》
	》两者比较
	》请求转发后，地址栏中的地址不变！重定向变
	》请求转发是一个请求，重定向是两个请求；
	》请求转发可以共享request域，而重定向因为是两个请求，所以不能共享request。
	
	会话Cookie Session
	》HTTP协议是无状态协议，需另外进行会话跟踪
	》使用session来完成会话跟踪，session底层依赖Cookie技术。
	》
	》Cookie
	》cookie.setMaxAge(-1) 只在浏览器内存中存活。一旦关闭浏览器窗口 消失
	》cookie.setMaxAge(60*60)  Cookie保存到硬盘上
	》
	》HttpSession
	》会话内需要共享的数据保存到HttSession对象中
	》
	》
面试题：
	1、生命周期4个阶段
	2、servlet工作过程
	3、关于service方法在多线程环境下，同步问题
		i. 如果service()方法没有访问Servlet的成员变量也没有访问全局的资源比如静态变量、文件、
		数据库连接等，而是只使用了当前线程自己的资源，比如非指向全局资源的临时变量、
		request和response对象等。该方法本身就是线程安全的，不必进行任何的同步控制。
		ii. 如果service()方法访问了Servlet的成员变量，但是对该变量的操作是只读操作，
		该方法本身就是线程安全的，不必进行任何的同步控制。
		iii. 如果service()方法访问了Servlet的成员变量，并且对该变量的操作既有读又有写，
		通常需要加上同步控制语句。
		iv. 如果service()方法访问了全局的静态变量，如果同一时刻系统中也可能有其它线程访
		问该静态变量，如果既有读也有写的操作，通常需要加上同步控制语句。
		v. 如果service()方法访问了全局的资源，比如文件、数据库连接等，
		通常需要加上同步控制语句。
	4、当服务终止时，servlet做了哪些操作
		当容器检测到一个Servlet实例应该从服务中被移除的时候，容器就会调用实例的destroy()方法，以释放资源
		得出结论：在整个生命周期中destroy方法只执行一次
	
	
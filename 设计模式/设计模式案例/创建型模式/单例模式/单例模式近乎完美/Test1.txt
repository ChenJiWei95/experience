其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建加synchronized关键字，也是可以的：


public class Test{

}
//使用内部类 SingletonFactory 解除线程问题
class Singleton{
	private Singleton(){}

	//使用内部类创建对象使得在线程环境获取实例对象的时候对象已经实例化，因此不会产生
	public static class SingletonFactory{
		private static Singleton instance = new Singleton() ;
		
	}
	public static getInstance(){
		return SingletonFactory.instance ;
	}

	//如果该对象被用于序列化，可以保证对象在序列化后保持一致
	public Object readResolve(){
		return getInstance() ;
	}
}